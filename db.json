{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/aloha/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/aloha/source/css/aloha.css","path":"css/aloha.css","modified":1,"renderable":1},{"_id":"themes/aloha/source/css/aloha.less","path":"css/aloha.less","modified":1,"renderable":1},{"_id":"themes/aloha/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/aloha/source/images/scrolltop.png","path":"images/scrolltop.png","modified":1,"renderable":1},{"_id":"themes/aloha/source/js/aloha-events.js","path":"js/aloha-events.js","modified":1,"renderable":1},{"_id":"themes/aloha/source/js/aloha.js","path":"js/aloha.js","modified":1,"renderable":1},{"_id":"themes/aloha/source/js/semantic-ui-algolia.js","path":"js/semantic-ui-algolia.js","modified":1,"renderable":1},{"_id":"themes/aloha/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.eot","path":"css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.eot","modified":1,"renderable":1},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/semantic.min.css","path":"css/semantic-ui/2.2.4/semantic.min.css","modified":1,"renderable":1},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.woff2","path":"css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.woff2","modified":1,"renderable":1},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.woff","path":"css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.woff","modified":1,"renderable":1},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.ttf","path":"css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.ttf","modified":1,"renderable":1},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.svg","path":"css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/aloha/.gitignore","hash":"6c706fc646a2e59060b1bee6a089dfb3c778764c","modified":1505388533000},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1511318077000},{"_id":"themes/aloha/.editorconfig","hash":"3b7ce764f2d4f18f5fbe1096561e2bb65032e034","modified":1505388533000},{"_id":"themes/aloha/.bowerrc","hash":"5d8502d31f0ed07e935bc6faf5e7f8ce8308ab75","modified":1505388533000},{"_id":"themes/aloha/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1506478972000},{"_id":"themes/aloha/README.md","hash":"a19f1b0a53773223b5d3dc4272d7896c3775425a","modified":1505388533000},{"_id":"themes/aloha/.travis.yml","hash":"78870628e0c372dd310c22a09fd05edba798f4c7","modified":1505388533000},{"_id":"themes/aloha/_config.yml","hash":"3824d02cca3f2223611e73fdfdff50b0ff4c741d","modified":1505388533000},{"_id":"themes/aloha/bower.json","hash":"8233b2c8f90e453b2745ae7f3284ddf1f9b75a3d","modified":1505388533000},{"_id":"themes/aloha/gulpfile.js","hash":"bfaee2f68dfe2b9eb879a737cbc221e28f85c27f","modified":1505388533000},{"_id":"themes/aloha/package.json","hash":"8233b2c8f90e453b2745ae7f3284ddf1f9b75a3d","modified":1505388533000},{"_id":"source/_posts/WebRTC-编译以及运行IOS的Demo.md","hash":"58fc34231f36112f2199ad69e3ef4165d62ff5f0","modified":1505438753000},{"_id":"source/_posts/.DS_Store","hash":"27b8cd19e010cc75a577c53516b7acda6e236041","modified":1511141973000},{"_id":"source/_posts/与Weex的第一次亲密接触—初识.md","hash":"1c15ea85522acb6c70d8687b2fa1fec576f0eeaa","modified":1511180165000},{"_id":"source/_posts/什么样代码是好的？对于编写代码，人们常常会出现哪些误区？.md","hash":"aa5f6251dd952084a1fd7c433a3b6aee348f1d23","modified":1505388932000},{"_id":"source/_posts/保证用户拿到的内容没有被篡改的验证方法.md","hash":"4fd1ecf3caed669a488b2dd7133e6ed08792acfb","modified":1505388958000},{"_id":"themes/aloha/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1505388533000},{"_id":"source/_posts/同一台电脑配置多个SSHKey.md","hash":"bdf1978ad8536a71543c518f876b16e1966703be","modified":1505723854000},{"_id":"source/_posts/重读SDWebImage.md","hash":"02befce3548d55648c56ce9e753af9f00c714e5f","modified":1506477298000},{"_id":"themes/aloha/.git/config","hash":"72466bed5572b9468fdc59b9f9c461df90b8c510","modified":1505388533000},{"_id":"themes/aloha/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1505388525000},{"_id":"themes/aloha/.git/index","hash":"74c70fc39012fcfc374f3482078390d2f9062d49","modified":1505388533000},{"_id":"themes/aloha/.git/packed-refs","hash":"13d34e08d584d0b13756139eca4a0acffb640c63","modified":1505388533000},{"_id":"themes/aloha/languages/zh-CN.yml","hash":"9c6261721ca39721f0423aa487cfd5245e90bfdf","modified":1505388533000},{"_id":"themes/aloha/languages/en.yml","hash":"765e1052c4322c31088b2c7015718b1dcca2a5d7","modified":1505388533000},{"_id":"themes/aloha/layout/archive.ejs","hash":"6913e223894986573c78c2a4a378d71d858784fe","modified":1505388533000},{"_id":"themes/aloha/layout/category.ejs","hash":"10739afe65298c0bb4b0946b02b5e1d38c4787ae","modified":1505388533000},{"_id":"themes/aloha/layout/layout.ejs","hash":"0b58c63e91f608fe8e2827ccc91eb000e8fd20b3","modified":1505388533000},{"_id":"themes/aloha/scripts/aloha-util.js","hash":"bc14e5337314eabaa88662897a134655adca004c","modified":1505388533000},{"_id":"themes/aloha/scripts/filter.js","hash":"efc79ce47f2bd3e49b61abbc71a3d6c9cd5413a5","modified":1505388533000},{"_id":"themes/aloha/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1505388533000},{"_id":"themes/aloha/layout/page.ejs","hash":"f2070022e642c96b962c4e9e4425614e77809dc0","modified":1505388533000},{"_id":"themes/aloha/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505388533000},{"_id":"themes/aloha/scripts/helper.js","hash":"0803912708018c969630fe92f040deeb091b561a","modified":1505388533000},{"_id":"themes/aloha/layout/tag.ejs","hash":"5caae7fe165eeb5e78880355e02e41f4b520db51","modified":1505388533000},{"_id":"themes/aloha/source/favicon.ico","hash":"732a554507e50045577bb007d0e11eeb1b775b66","modified":1505388533000},{"_id":"source/_posts/与Weex的第一次亲密接触—初识/node-v.png","hash":"15d309e57d1ee5b1bac7e8fbee3faa179f281af0","modified":1510898542000},{"_id":"themes/aloha/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1505388525000},{"_id":"themes/aloha/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1505388525000},{"_id":"themes/aloha/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1505388525000},{"_id":"themes/aloha/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1505388525000},{"_id":"themes/aloha/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1505388525000},{"_id":"themes/aloha/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1505388525000},{"_id":"themes/aloha/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1505388525000},{"_id":"themes/aloha/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1505388525000},{"_id":"themes/aloha/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1505388525000},{"_id":"themes/aloha/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1505388525000},{"_id":"themes/aloha/.git/logs/HEAD","hash":"8aee694be13dca5e7a32ac3815d19d617e879c07","modified":1505388533000},{"_id":"themes/aloha/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1505388525000},{"_id":"themes/aloha/layout/_partial/archive-post.ejs","hash":"31afcbe64063ba274e02f0df5ff2f1eaf6a410d2","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/archive.ejs","hash":"a9792ed70d2bde56216682420d7e4f1a2a6b0a36","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/footer.ejs","hash":"71ed42d099988a69ceae2f75404eb79031ff7be0","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/article.ejs","hash":"caf26cd0f21b827f54406244375b9ed83691d66c","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/js-params.ejs","hash":"77984c4bbf6c14a95a156ffd0d7302ac0b968af1","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/header.ejs","hash":"2c24409923cc04734730560d658e6b56d36204bf","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/menu.ejs","hash":"6309fe92f6f72e0796934e5373e7c0e293af032a","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/pagination.ejs","hash":"71ace53e3e404212775d05f0ed991e02a79b6f1e","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/recent-posts.ejs","hash":"c4d6ad99fabe8a9821511e2c39861b268779d40e","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/search-modal.ejs","hash":"5f6bd05120b3df19024dd59da0be45031a00f6ca","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/sidebar-card.ejs","hash":"f9ba3f0f22a2717fec3e0bb7fa66a9237b4ad368","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/structured-data-markup.ejs","hash":"1d9579c8f3620faf08cdba9c134ea11c67180180","modified":1505388533000},{"_id":"themes/aloha/layout/_widget/disqus.ejs","hash":"543502ec45ac273e4681d8dc5c9140ee34d871ee","modified":1505388533000},{"_id":"themes/aloha/layout/_widget/duoshuo.ejs","hash":"91b3780f25cc94b8e4379c7ffbad3fded3b8c939","modified":1505388533000},{"_id":"themes/aloha/scripts/filter/after_post_render.js","hash":"17dfe245d8804f6ed109b78d43883e53fbead4ca","modified":1505388533000},{"_id":"themes/aloha/scripts/helper/toc.js","hash":"a898c9de0a099b4f720c6586ca89a0b7c826af0c","modified":1505388533000},{"_id":"themes/aloha/source/css/aloha.css","hash":"bec88f07f869e55381425b493d458ef8d3b11e82","modified":1505388533000},{"_id":"themes/aloha/source/css/aloha.less","hash":"39910135947134d51fd490af7fab5f85636d189d","modified":1505388533000},{"_id":"themes/aloha/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1506496036000},{"_id":"themes/aloha/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1505388533000},{"_id":"themes/aloha/source/images/scrolltop.png","hash":"97ae9aeea6178c2d73ced32aa7161743b1962998","modified":1505388533000},{"_id":"themes/aloha/source/js/aloha-events.js","hash":"2cd034c5bce6e1260bf7918ebfa1efa287694f6b","modified":1505388533000},{"_id":"themes/aloha/source/js/aloha.js","hash":"679001bf3666d0d32702308cfa77e3d714d2d2f6","modified":1505388533000},{"_id":"themes/aloha/source/js/semantic-ui-algolia.js","hash":"108379745038ae336bbcb11e53fc2733248632b0","modified":1505388533000},{"_id":"source/_posts/与Weex的第一次亲密接触—初识/ios.png","hash":"b6a421797360f47448ef8076524169e9fd9dfbdd","modified":1511142232000},{"_id":"source/_posts/与Weex的第一次亲密接触—初识/image-index.png","hash":"f7cf7d5e197fb090647af23099fe66b8eff03689","modified":1511101769000},{"_id":"source/_posts/与Weex的第一次亲密接触—初识/podinstall.png","hash":"3332e7f5800c6647478cbf34aa34b96ef26e5843","modified":1511104677000},{"_id":"source/_posts/与Weex的第一次亲密接触—初识/weex.png","hash":"62d6f3c3ef72b5475bdbd1373975c027f89db0a2","modified":1510898717000},{"_id":"themes/aloha/.git/refs/heads/master","hash":"931877637a58ff090ff99de97c8282af6047e514","modified":1505388533000},{"_id":"themes/aloha/.git/objects/pack/pack-b8e2c626451e6a4ef038d259722ab73a5393cce8.idx","hash":"1fb093d330c1f21dc60d107649163efe412e236c","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/post/date.ejs","hash":"c334b04c440fad46619fff14422b6e7b57cae7c7","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/post/gallery.ejs","hash":"0dbacc346e0250edcd814309056fb80ad5ae967f","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/post/nav.ejs","hash":"cf2aae1bf16c813c6a3a2d2f4271ef037a57d159","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/post/tag.ejs","hash":"0b16be115bb0bd548cdcbfb5ef0d0a9378b6d8be","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/post/title.ejs","hash":"48ac6bb0e6d8c0c14c2390952b35867539f08f69","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/post/category.ejs","hash":"e04160c8de3cb3470aa659b22812fd466d78c234","modified":1505388533000},{"_id":"themes/aloha/source/css/_partial/highlight.less","hash":"b51526be9463a6a427267592c6a54066136cfe4d","modified":1505388533000},{"_id":"themes/aloha/source/css/_partial/main.less","hash":"14f5f0dbac5fbbc6f7cfdd7e423edb908ea1cc57","modified":1505388533000},{"_id":"themes/aloha/source/css/_partial/variables.less","hash":"09e4bcb52124928352b351769976e5fd157ed785","modified":1505388533000},{"_id":"themes/aloha/.git/logs/refs/heads/master","hash":"8aee694be13dca5e7a32ac3815d19d617e879c07","modified":1505388533000},{"_id":"themes/aloha/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/theme/simple/post_item.ejs","hash":"e023d17ae73276067bb6f96dabdef509a97fcdec","modified":1505388533000},{"_id":"themes/aloha/layout/_partial/theme/simple/post-description.ejs","hash":"a95c1cdc5f262736853174a13e4a5061d7e4a48e","modified":1505388533000},{"_id":"source/_posts/与Weex的第一次亲密接触—初识/dabaochenggong.png","hash":"86a44509a590e5e462a85d92f4f081f63ad2adfe","modified":1511102819000},{"_id":"themes/aloha/.git/logs/refs/remotes/origin/HEAD","hash":"8aee694be13dca5e7a32ac3815d19d617e879c07","modified":1505388533000},{"_id":"themes/aloha/source/images/avatar.jpg","hash":"4684ccd9e89285f6c52ae2bb7e64ecf7607839e0","modified":1506479049000},{"_id":"source/_posts/与Weex的第一次亲密接触—初识/webbuild.png","hash":"d462d8031844678f2785819c4b187d31bf68b940","modified":1511102965000},{"_id":"source/_posts/重读SDWebImage/SDWebImageClassDiagram.png","hash":"68ddf6d903cda966215bc2ddf0f28066f45a5b37","modified":1504512827000},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.eot","hash":"3e63fc9b3de4580f1f3bec0631436f755b80f167","modified":1505388533000},{"_id":"source/_posts/重读SDWebImage/SDWebImageSequenceDiagram.png","hash":"7a4589eed9235dec6fc47cd9a2c8f7289ff0e714","modified":1504512827000},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/semantic.min.css","hash":"00d3a19960b111ae8e805afce3788ee0213aa363","modified":1505388533000},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.woff2","hash":"1075231650f579955905bb2f6527148a8e2b4b16","modified":1505388533000},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.woff","hash":"56ce13e71c2150d81bc972940584915181bd6081","modified":1505388533000},{"_id":"themes/aloha/.git/objects/pack/pack-b8e2c626451e6a4ef038d259722ab73a5393cce8.pack","hash":"98a11ded8aa9dbe9f1652b40c7298b2410ac49f9","modified":1505388533000},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.ttf","hash":"9088143b19979779b2116cef38b661f72d982e19","modified":1505388533000},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.svg","hash":"26bb1c5ef100a1cd71923f1d5dc29fc797ef4639","modified":1505388533000},{"_id":"public/2017/09/18/同一台电脑配置多个SSHKey/index.html","hash":"c2c6602e8e8184dae5493a75f04941d188e96350","modified":1511318600145},{"_id":"public/2017/08/28/保证用户拿到的内容没有被篡改的验证方法/index.html","hash":"32781576d2818d7a4aca007709721b521888da87","modified":1511318600145},{"_id":"public/archives/index.html","hash":"483bbe7089ebc9ccb35a51455fc34d02a2d01db7","modified":1511318600145},{"_id":"public/archives/2017/index.html","hash":"3af33b369b69325f55e8f2ce2399601d8cdaebbd","modified":1511318600145},{"_id":"public/archives/2017/08/index.html","hash":"876cc61d5639c8d7bf5e2c2975a474e8077e15fe","modified":1511318600145},{"_id":"public/archives/2017/09/index.html","hash":"9e49a61060d2b42d80ac8df949b0669c7a69f321","modified":1511318600145},{"_id":"public/archives/2017/11/index.html","hash":"4727cf56a93107b5a849392b184974a23152c80c","modified":1511318600146},{"_id":"public/index.html","hash":"4857782bcc48e20e4e4adb0829df569644e17608","modified":1511318600146},{"_id":"public/2017/11/20/与Weex的第一次亲密接触—初识/index.html","hash":"afe92e9a985e191b49599ba1a58492bb06f54c91","modified":1511318600146},{"_id":"public/2017/09/18/重读SDWebImage/index.html","hash":"f02665539aecf940aae2e90ae46e7ec7e8295b71","modified":1511318600146},{"_id":"public/2017/09/14/WebRTC-编译以及运行IOS的Demo/index.html","hash":"bd946ffd00557a0e87097735713dd4a3bd78e143","modified":1511318600146},{"_id":"public/2017/08/28/什么样代码是好的？对于编写代码，人们常常会出现哪些误区？/index.html","hash":"e22cd76997b9880e94918c6feeb80a0be2f6bc6b","modified":1511318600146},{"_id":"public/css/aloha.less","hash":"39910135947134d51fd490af7fab5f85636d189d","modified":1511318600149},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1511318600150},{"_id":"public/images/scrolltop.png","hash":"97ae9aeea6178c2d73ced32aa7161743b1962998","modified":1511318600150},{"_id":"public/images/avatar.jpg","hash":"4684ccd9e89285f6c52ae2bb7e64ecf7607839e0","modified":1511318600150},{"_id":"public/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.eot","hash":"3e63fc9b3de4580f1f3bec0631436f755b80f167","modified":1511318600150},{"_id":"public/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.woff2","hash":"1075231650f579955905bb2f6527148a8e2b4b16","modified":1511318600150},{"_id":"public/2017/11/20/与Weex的第一次亲密接触—初识/node-v.png","hash":"15d309e57d1ee5b1bac7e8fbee3faa179f281af0","modified":1511318600150},{"_id":"public/favicon.ico","hash":"732a554507e50045577bb007d0e11eeb1b775b66","modified":1511318600154},{"_id":"public/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.woff","hash":"56ce13e71c2150d81bc972940584915181bd6081","modified":1511318600154},{"_id":"public/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.ttf","hash":"9088143b19979779b2116cef38b661f72d982e19","modified":1511318600158},{"_id":"public/2017/11/20/与Weex的第一次亲密接触—初识/image-index.png","hash":"f7cf7d5e197fb090647af23099fe66b8eff03689","modified":1511318600158},{"_id":"public/2017/11/20/与Weex的第一次亲密接触—初识/ios.png","hash":"b6a421797360f47448ef8076524169e9fd9dfbdd","modified":1511318600158},{"_id":"public/2017/11/20/与Weex的第一次亲密接触—初识/podinstall.png","hash":"3332e7f5800c6647478cbf34aa34b96ef26e5843","modified":1511318600158},{"_id":"public/css/aloha.css","hash":"bec88f07f869e55381425b493d458ef8d3b11e82","modified":1511318600161},{"_id":"public/js/aloha-events.js","hash":"2cd034c5bce6e1260bf7918ebfa1efa287694f6b","modified":1511318600161},{"_id":"public/js/aloha.js","hash":"679001bf3666d0d32702308cfa77e3d714d2d2f6","modified":1511318600161},{"_id":"public/js/semantic-ui-algolia.js","hash":"108379745038ae336bbcb11e53fc2733248632b0","modified":1511318600161},{"_id":"public/css/semantic-ui/2.2.4/semantic.min.css","hash":"00d3a19960b111ae8e805afce3788ee0213aa363","modified":1511318600161},{"_id":"public/2017/11/20/与Weex的第一次亲密接触—初识/weex.png","hash":"62d6f3c3ef72b5475bdbd1373975c027f89db0a2","modified":1511318600161},{"_id":"public/2017/09/18/重读SDWebImage/SDWebImageSequenceDiagram.png","hash":"7a4589eed9235dec6fc47cd9a2c8f7289ff0e714","modified":1511318600161},{"_id":"public/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.svg","hash":"26bb1c5ef100a1cd71923f1d5dc29fc797ef4639","modified":1511318600165},{"_id":"public/2017/11/20/与Weex的第一次亲密接触—初识/dabaochenggong.png","hash":"86a44509a590e5e462a85d92f4f081f63ad2adfe","modified":1511318600171},{"_id":"public/2017/11/20/与Weex的第一次亲密接触—初识/webbuild.png","hash":"d462d8031844678f2785819c4b187d31bf68b940","modified":1511318600174},{"_id":"public/2017/09/18/重读SDWebImage/SDWebImageClassDiagram.png","hash":"68ddf6d903cda966215bc2ddf0f28066f45a5b37","modified":1511318600177}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"WebRTC-编译以及运行IOS的Demo","_content":"注：本篇文章的前提是，你已经下载好官方8G多的源代码，如还没有得到代码，请参照其他攻略先下载好代码。此外需说明下，我的系统环境为Mac OSX 10.11.4\n\n（1）下载安装ninja（如已安装，则可跳过这一步）：\n因为Xcode是不能直接编译webRTC的代码的，必须使用ninja。\n- 获得并编译ninja的代码\n```\n$ git clone git://github.com/martine/ninja.git\n$ cd ninja/\n$ ./bootstrap.py\n```\n- 上述步骤会在当前目录下产生一个ninja的可运行文件。使用以下命令把它复制到/usrlocal/bin下\n```\n$ sudo cp ninja /usr/local/bin/\n$ sudo chmod a+rx /usr/local/bin/ninja\n```\n\n（2）配置需要的编译的目标环境\n- cd 至下载好的源代码的src目录下，其实就是主目录就这一个大文件夹。\n- 配置命令，以下命令根据demo的需要情况，只选其中一种执行，根据不同的情况，最后输出的demo也不一样。\n  - 32位真机\n```\nexport GYP_DEFINES=\"OS=ios target_arch=arm\"\nexport GYP_GENERATOR_FLAGS=\"output_dir=out_ios\"\n```\n  - 64位真机\n```\nexport GYP_DEFINES=\"OS=ios target_arch=arm64\"\nexport GYP_GENERATOR_FLAGS=\"output_dir=out_ios64\"\n```\n  - 32位模拟器\n```\nexport GYP_DEFINES=\"OS=ios target_arch=ia32\"\nexport GYP_GENERATOR_FLAGS=\"output_dir=out_sim\"\n```\n - 64位模拟器\n```\nexport GYP_DEFINES=\"OS=ios target_arch=x64\"\nexport GYP_GENERATOR_FLAGS=\"output_dir=out_sim\"\n```\n  - OSX\n```\nexport GYP_DEFINES=\"OS=mac target_arch=x64\"\nexport GYP_GENERATOR_FLAGS=\"output_dir=out_mac\"\n```\n- 执行完上面的配置命令后 执行脚本\n```\nwebrtc/build/gyp_webrtc.py\n```\n\n（3）编译运行demo\n- 这里有两种方式，第一种，使用ninja命令直接编译运行，第二种，生成xcode工程，在xcode里运行，但实际上并不是xcode编译的，而实际上还是运行了第一种的命令脚本。只不过使用xcode可以看见一些源代码，比较清晰些\n\n- 直接编译运行\n```\nninja -C out_ios/Debug-iphoneos AppRTCDemo\nninja -C out_ios/Release-iphoneos AppRTCDemo\nninja -C out_sim/Debug-iphonesimulator AppRTCDemo\n```\n\n- 生成xcode编译运行\n  - 还是配置一下环境\n```\nexport GYP_GENERATOR_FLAGS=\"xcode_project_version=3.2 xcode_ninja_target_pattern=All_iOS xcode_ninja_executable_target_pattern=AppRTCDemo|libjingle_peerconnection_unittest|libjingle_peerconnection_objc_test output_dir=out_ios\"\nexport GYP_GENERATORS=\"ninja,xcode-ninja\"\n```\n - 还是要再执行一下上面那个脚本\n```\nwebrtc/build/gyp_webrtc.py\n```\n - 执行完后再src目录下就是生成一个all.ninja.xcworkspace工程，打开后会根据你在之前配置的情况生成不同的target，后面就可以command+R运行就好了，上面配置的是真机的话也是可以的。\n\n（4）测试demo\n- 在真机装一个demo（因为真机有摄像头）\n- 用谷歌或火狐浏览器打开\n  https://apprtc.appspot.com/  需要翻墙\n- 两边同时进入同一个房间号即可连接。","source":"_posts/WebRTC-编译以及运行IOS的Demo.md","raw":"---\ntitle: WebRTC-编译以及运行IOS的Demo\n---\n注：本篇文章的前提是，你已经下载好官方8G多的源代码，如还没有得到代码，请参照其他攻略先下载好代码。此外需说明下，我的系统环境为Mac OSX 10.11.4\n\n（1）下载安装ninja（如已安装，则可跳过这一步）：\n因为Xcode是不能直接编译webRTC的代码的，必须使用ninja。\n- 获得并编译ninja的代码\n```\n$ git clone git://github.com/martine/ninja.git\n$ cd ninja/\n$ ./bootstrap.py\n```\n- 上述步骤会在当前目录下产生一个ninja的可运行文件。使用以下命令把它复制到/usrlocal/bin下\n```\n$ sudo cp ninja /usr/local/bin/\n$ sudo chmod a+rx /usr/local/bin/ninja\n```\n\n（2）配置需要的编译的目标环境\n- cd 至下载好的源代码的src目录下，其实就是主目录就这一个大文件夹。\n- 配置命令，以下命令根据demo的需要情况，只选其中一种执行，根据不同的情况，最后输出的demo也不一样。\n  - 32位真机\n```\nexport GYP_DEFINES=\"OS=ios target_arch=arm\"\nexport GYP_GENERATOR_FLAGS=\"output_dir=out_ios\"\n```\n  - 64位真机\n```\nexport GYP_DEFINES=\"OS=ios target_arch=arm64\"\nexport GYP_GENERATOR_FLAGS=\"output_dir=out_ios64\"\n```\n  - 32位模拟器\n```\nexport GYP_DEFINES=\"OS=ios target_arch=ia32\"\nexport GYP_GENERATOR_FLAGS=\"output_dir=out_sim\"\n```\n - 64位模拟器\n```\nexport GYP_DEFINES=\"OS=ios target_arch=x64\"\nexport GYP_GENERATOR_FLAGS=\"output_dir=out_sim\"\n```\n  - OSX\n```\nexport GYP_DEFINES=\"OS=mac target_arch=x64\"\nexport GYP_GENERATOR_FLAGS=\"output_dir=out_mac\"\n```\n- 执行完上面的配置命令后 执行脚本\n```\nwebrtc/build/gyp_webrtc.py\n```\n\n（3）编译运行demo\n- 这里有两种方式，第一种，使用ninja命令直接编译运行，第二种，生成xcode工程，在xcode里运行，但实际上并不是xcode编译的，而实际上还是运行了第一种的命令脚本。只不过使用xcode可以看见一些源代码，比较清晰些\n\n- 直接编译运行\n```\nninja -C out_ios/Debug-iphoneos AppRTCDemo\nninja -C out_ios/Release-iphoneos AppRTCDemo\nninja -C out_sim/Debug-iphonesimulator AppRTCDemo\n```\n\n- 生成xcode编译运行\n  - 还是配置一下环境\n```\nexport GYP_GENERATOR_FLAGS=\"xcode_project_version=3.2 xcode_ninja_target_pattern=All_iOS xcode_ninja_executable_target_pattern=AppRTCDemo|libjingle_peerconnection_unittest|libjingle_peerconnection_objc_test output_dir=out_ios\"\nexport GYP_GENERATORS=\"ninja,xcode-ninja\"\n```\n - 还是要再执行一下上面那个脚本\n```\nwebrtc/build/gyp_webrtc.py\n```\n - 执行完后再src目录下就是生成一个all.ninja.xcworkspace工程，打开后会根据你在之前配置的情况生成不同的target，后面就可以command+R运行就好了，上面配置的是真机的话也是可以的。\n\n（4）测试demo\n- 在真机装一个demo（因为真机有摄像头）\n- 用谷歌或火狐浏览器打开\n  https://apprtc.appspot.com/  需要翻墙\n- 两边同时进入同一个房间号即可连接。","slug":"WebRTC-编译以及运行IOS的Demo","published":1,"date":"2017-09-14T09:07:39.000Z","updated":"2017-09-15T01:25:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaag2mrg0000hgod6amd7wy7","content":"<p>&#x6CE8;&#xFF1A;&#x672C;&#x7BC7;&#x6587;&#x7AE0;&#x7684;&#x524D;&#x63D0;&#x662F;&#xFF0C;&#x4F60;&#x5DF2;&#x7ECF;&#x4E0B;&#x8F7D;&#x597D;&#x5B98;&#x65B9;8G&#x591A;&#x7684;&#x6E90;&#x4EE3;&#x7801;&#xFF0C;&#x5982;&#x8FD8;&#x6CA1;&#x6709;&#x5F97;&#x5230;&#x4EE3;&#x7801;&#xFF0C;&#x8BF7;&#x53C2;&#x7167;&#x5176;&#x4ED6;&#x653B;&#x7565;&#x5148;&#x4E0B;&#x8F7D;&#x597D;&#x4EE3;&#x7801;&#x3002;&#x6B64;&#x5916;&#x9700;&#x8BF4;&#x660E;&#x4E0B;&#xFF0C;&#x6211;&#x7684;&#x7CFB;&#x7EDF;&#x73AF;&#x5883;&#x4E3A;Mac OSX 10.11.4</p>\n<p>&#xFF08;1&#xFF09;&#x4E0B;&#x8F7D;&#x5B89;&#x88C5;ninja&#xFF08;&#x5982;&#x5DF2;&#x5B89;&#x88C5;&#xFF0C;&#x5219;&#x53EF;&#x8DF3;&#x8FC7;&#x8FD9;&#x4E00;&#x6B65;&#xFF09;&#xFF1A;<br>&#x56E0;&#x4E3A;Xcode&#x662F;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x7F16;&#x8BD1;webRTC&#x7684;&#x4EE3;&#x7801;&#x7684;&#xFF0C;&#x5FC5;&#x987B;&#x4F7F;&#x7528;ninja&#x3002;</p>\n<ul class=\"ui list\">\n<li><p>&#x83B7;&#x5F97;&#x5E76;&#x7F16;&#x8BD1;ninja&#x7684;&#x4EE3;&#x7801;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone git://github.com/martine/ninja.git</div><div class=\"line\">$ cd ninja/</div><div class=\"line\">$ ./bootstrap.py</div></pre></td></tr></table></figure>\n</li>\n<li><p>&#x4E0A;&#x8FF0;&#x6B65;&#x9AA4;&#x4F1A;&#x5728;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x4E0B;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;ninja&#x7684;&#x53EF;&#x8FD0;&#x884C;&#x6587;&#x4EF6;&#x3002;&#x4F7F;&#x7528;&#x4EE5;&#x4E0B;&#x547D;&#x4EE4;&#x628A;&#x5B83;&#x590D;&#x5236;&#x5230;/usrlocal/bin&#x4E0B;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo cp ninja /usr/local/bin/</div><div class=\"line\">$ sudo chmod a+rx /usr/local/bin/ninja</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>&#xFF08;2&#xFF09;&#x914D;&#x7F6E;&#x9700;&#x8981;&#x7684;&#x7F16;&#x8BD1;&#x7684;&#x76EE;&#x6807;&#x73AF;&#x5883;</p>\n<ul class=\"ui list\">\n<li>cd &#x81F3;&#x4E0B;&#x8F7D;&#x597D;&#x7684;&#x6E90;&#x4EE3;&#x7801;&#x7684;src&#x76EE;&#x5F55;&#x4E0B;&#xFF0C;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x4E3B;&#x76EE;&#x5F55;&#x5C31;&#x8FD9;&#x4E00;&#x4E2A;&#x5927;&#x6587;&#x4EF6;&#x5939;&#x3002;</li>\n<li><p>&#x914D;&#x7F6E;&#x547D;&#x4EE4;&#xFF0C;&#x4EE5;&#x4E0B;&#x547D;&#x4EE4;&#x6839;&#x636E;demo&#x7684;&#x9700;&#x8981;&#x60C5;&#x51B5;&#xFF0C;&#x53EA;&#x9009;&#x5176;&#x4E2D;&#x4E00;&#x79CD;&#x6267;&#x884C;&#xFF0C;&#x6839;&#x636E;&#x4E0D;&#x540C;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x6700;&#x540E;&#x8F93;&#x51FA;&#x7684;demo&#x4E5F;&#x4E0D;&#x4E00;&#x6837;&#x3002;</p>\n<ul>\n<li><p>32&#x4F4D;&#x771F;&#x673A;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GYP_DEFINES=&quot;OS=ios target_arch=arm&quot;</div><div class=\"line\">export GYP_GENERATOR_FLAGS=&quot;output_dir=out_ios&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>64&#x4F4D;&#x771F;&#x673A;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GYP_DEFINES=&quot;OS=ios target_arch=arm64&quot;</div><div class=\"line\">export GYP_GENERATOR_FLAGS=&quot;output_dir=out_ios64&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>32&#x4F4D;&#x6A21;&#x62DF;&#x5668;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GYP_DEFINES=&quot;OS=ios target_arch=ia32&quot;</div><div class=\"line\">export GYP_GENERATOR_FLAGS=&quot;output_dir=out_sim&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>64&#x4F4D;&#x6A21;&#x62DF;&#x5668;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GYP_DEFINES=&quot;OS=ios target_arch=x64&quot;</div><div class=\"line\">export GYP_GENERATOR_FLAGS=&quot;output_dir=out_sim&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>OSX</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GYP_DEFINES=&quot;OS=mac target_arch=x64&quot;</div><div class=\"line\">export GYP_GENERATOR_FLAGS=&quot;output_dir=out_mac&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>&#x6267;&#x884C;&#x5B8C;&#x4E0A;&#x9762;&#x7684;&#x914D;&#x7F6E;&#x547D;&#x4EE4;&#x540E; &#x6267;&#x884C;&#x811A;&#x672C;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webrtc/build/gyp_webrtc.py</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>&#xFF08;3&#xFF09;&#x7F16;&#x8BD1;&#x8FD0;&#x884C;demo</p>\n<ul class=\"ui list\">\n<li><p>&#x8FD9;&#x91CC;&#x6709;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#xFF0C;&#x7B2C;&#x4E00;&#x79CD;&#xFF0C;&#x4F7F;&#x7528;ninja&#x547D;&#x4EE4;&#x76F4;&#x63A5;&#x7F16;&#x8BD1;&#x8FD0;&#x884C;&#xFF0C;&#x7B2C;&#x4E8C;&#x79CD;&#xFF0C;&#x751F;&#x6210;xcode&#x5DE5;&#x7A0B;&#xFF0C;&#x5728;xcode&#x91CC;&#x8FD0;&#x884C;&#xFF0C;&#x4F46;&#x5B9E;&#x9645;&#x4E0A;&#x5E76;&#x4E0D;&#x662F;xcode&#x7F16;&#x8BD1;&#x7684;&#xFF0C;&#x800C;&#x5B9E;&#x9645;&#x4E0A;&#x8FD8;&#x662F;&#x8FD0;&#x884C;&#x4E86;&#x7B2C;&#x4E00;&#x79CD;&#x7684;&#x547D;&#x4EE4;&#x811A;&#x672C;&#x3002;&#x53EA;&#x4E0D;&#x8FC7;&#x4F7F;&#x7528;xcode&#x53EF;&#x4EE5;&#x770B;&#x89C1;&#x4E00;&#x4E9B;&#x6E90;&#x4EE3;&#x7801;&#xFF0C;&#x6BD4;&#x8F83;&#x6E05;&#x6670;&#x4E9B;</p>\n</li>\n<li><p>&#x76F4;&#x63A5;&#x7F16;&#x8BD1;&#x8FD0;&#x884C;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ninja -C out_ios/Debug-iphoneos AppRTCDemo</div><div class=\"line\">ninja -C out_ios/Release-iphoneos AppRTCDemo</div><div class=\"line\">ninja -C out_sim/Debug-iphonesimulator AppRTCDemo</div></pre></td></tr></table></figure>\n</li>\n<li><p>&#x751F;&#x6210;xcode&#x7F16;&#x8BD1;&#x8FD0;&#x884C;</p>\n<ul>\n<li><p>&#x8FD8;&#x662F;&#x914D;&#x7F6E;&#x4E00;&#x4E0B;&#x73AF;&#x5883;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GYP_GENERATOR_FLAGS=&quot;xcode_project_version=3.2 xcode_ninja_target_pattern=All_iOS xcode_ninja_executable_target_pattern=AppRTCDemo|libjingle_peerconnection_unittest|libjingle_peerconnection_objc_test output_dir=out_ios&quot;</div><div class=\"line\">export GYP_GENERATORS=&quot;ninja,xcode-ninja&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>&#x8FD8;&#x662F;&#x8981;&#x518D;&#x6267;&#x884C;&#x4E00;&#x4E0B;&#x4E0A;&#x9762;&#x90A3;&#x4E2A;&#x811A;&#x672C;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webrtc/build/gyp_webrtc.py</div></pre></td></tr></table></figure>\n</li>\n<li><p>&#x6267;&#x884C;&#x5B8C;&#x540E;&#x518D;src&#x76EE;&#x5F55;&#x4E0B;&#x5C31;&#x662F;&#x751F;&#x6210;&#x4E00;&#x4E2A;all.ninja.xcworkspace&#x5DE5;&#x7A0B;&#xFF0C;&#x6253;&#x5F00;&#x540E;&#x4F1A;&#x6839;&#x636E;&#x4F60;&#x5728;&#x4E4B;&#x524D;&#x914D;&#x7F6E;&#x7684;&#x60C5;&#x51B5;&#x751F;&#x6210;&#x4E0D;&#x540C;&#x7684;target&#xFF0C;&#x540E;&#x9762;&#x5C31;&#x53EF;&#x4EE5;command+R&#x8FD0;&#x884C;&#x5C31;&#x597D;&#x4E86;&#xFF0C;&#x4E0A;&#x9762;&#x914D;&#x7F6E;&#x7684;&#x662F;&#x771F;&#x673A;&#x7684;&#x8BDD;&#x4E5F;&#x662F;&#x53EF;&#x4EE5;&#x7684;&#x3002;</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>&#xFF08;4&#xFF09;&#x6D4B;&#x8BD5;demo</p>\n<ul class=\"ui list\">\n<li>&#x5728;&#x771F;&#x673A;&#x88C5;&#x4E00;&#x4E2A;demo&#xFF08;&#x56E0;&#x4E3A;&#x771F;&#x673A;&#x6709;&#x6444;&#x50CF;&#x5934;&#xFF09;</li>\n<li>&#x7528;&#x8C37;&#x6B4C;&#x6216;&#x706B;&#x72D0;&#x6D4F;&#x89C8;&#x5668;&#x6253;&#x5F00;<br><a href=\"https://apprtc.appspot.com/\" target=\"_blank\" rel=\"external\">https://apprtc.appspot.com/</a>  &#x9700;&#x8981;&#x7FFB;&#x5899;</li>\n<li>&#x4E24;&#x8FB9;&#x540C;&#x65F6;&#x8FDB;&#x5165;&#x540C;&#x4E00;&#x4E2A;&#x623F;&#x95F4;&#x53F7;&#x5373;&#x53EF;&#x8FDE;&#x63A5;&#x3002;</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>注：本篇文章的前提是，你已经下载好官方8G多的源代码，如还没有得到代码，请参照其他攻略先下载好代码。此外需说明下，我的系统环境为Mac OSX 10.11.4</p>\n<p>（1）下载安装ninja（如已安装，则可跳过这一步）：<br>因为Xcode是不能直接编译webRTC的代码的，必须使用ninja。</p>\n<ul>\n<li><p>获得并编译ninja的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone git://github.com/martine/ninja.git</div><div class=\"line\">$ cd ninja/</div><div class=\"line\">$ ./bootstrap.py</div></pre></td></tr></table></figure>\n</li>\n<li><p>上述步骤会在当前目录下产生一个ninja的可运行文件。使用以下命令把它复制到/usrlocal/bin下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo cp ninja /usr/local/bin/</div><div class=\"line\">$ sudo chmod a+rx /usr/local/bin/ninja</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>（2）配置需要的编译的目标环境</p>\n<ul>\n<li>cd 至下载好的源代码的src目录下，其实就是主目录就这一个大文件夹。</li>\n<li><p>配置命令，以下命令根据demo的需要情况，只选其中一种执行，根据不同的情况，最后输出的demo也不一样。</p>\n<ul>\n<li><p>32位真机</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GYP_DEFINES=&quot;OS=ios target_arch=arm&quot;</div><div class=\"line\">export GYP_GENERATOR_FLAGS=&quot;output_dir=out_ios&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>64位真机</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GYP_DEFINES=&quot;OS=ios target_arch=arm64&quot;</div><div class=\"line\">export GYP_GENERATOR_FLAGS=&quot;output_dir=out_ios64&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>32位模拟器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GYP_DEFINES=&quot;OS=ios target_arch=ia32&quot;</div><div class=\"line\">export GYP_GENERATOR_FLAGS=&quot;output_dir=out_sim&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>64位模拟器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GYP_DEFINES=&quot;OS=ios target_arch=x64&quot;</div><div class=\"line\">export GYP_GENERATOR_FLAGS=&quot;output_dir=out_sim&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>OSX</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GYP_DEFINES=&quot;OS=mac target_arch=x64&quot;</div><div class=\"line\">export GYP_GENERATOR_FLAGS=&quot;output_dir=out_mac&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>执行完上面的配置命令后 执行脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webrtc/build/gyp_webrtc.py</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>（3）编译运行demo</p>\n<ul>\n<li><p>这里有两种方式，第一种，使用ninja命令直接编译运行，第二种，生成xcode工程，在xcode里运行，但实际上并不是xcode编译的，而实际上还是运行了第一种的命令脚本。只不过使用xcode可以看见一些源代码，比较清晰些</p>\n</li>\n<li><p>直接编译运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ninja -C out_ios/Debug-iphoneos AppRTCDemo</div><div class=\"line\">ninja -C out_ios/Release-iphoneos AppRTCDemo</div><div class=\"line\">ninja -C out_sim/Debug-iphonesimulator AppRTCDemo</div></pre></td></tr></table></figure>\n</li>\n<li><p>生成xcode编译运行</p>\n<ul>\n<li><p>还是配置一下环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GYP_GENERATOR_FLAGS=&quot;xcode_project_version=3.2 xcode_ninja_target_pattern=All_iOS xcode_ninja_executable_target_pattern=AppRTCDemo|libjingle_peerconnection_unittest|libjingle_peerconnection_objc_test output_dir=out_ios&quot;</div><div class=\"line\">export GYP_GENERATORS=&quot;ninja,xcode-ninja&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>还是要再执行一下上面那个脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webrtc/build/gyp_webrtc.py</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行完后再src目录下就是生成一个all.ninja.xcworkspace工程，打开后会根据你在之前配置的情况生成不同的target，后面就可以command+R运行就好了，上面配置的是真机的话也是可以的。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>（4）测试demo</p>\n<ul>\n<li>在真机装一个demo（因为真机有摄像头）</li>\n<li>用谷歌或火狐浏览器打开<br><a href=\"https://apprtc.appspot.com/\" target=\"_blank\" rel=\"external\">https://apprtc.appspot.com/</a>  需要翻墙</li>\n<li>两边同时进入同一个房间号即可连接。</li>\n</ul>\n"},{"title":"与Weex的第一次亲密接触—初识","date":"2017-11-20T01:39:15.000Z","_content":"\n#### Weex—初识\n\n​\t大前端统一开发方案当前在市场上有很多，从去年的ReacNative特别火，到后来阿里推出的Weex等，一直想从某种角度入手去学习一些除iOS原生开发之外的一些东西，经过对比之后，感觉Weex比较适合，她的优势是轻量，灵活，和原生一样的流畅度，热更新，三端统一，但是缺点也很明显，也是RN一样具有的，不能全面的覆盖移动端的特性，每年移动端都会出一些新的特性，比如今年推出的人脸识别。此外，在性能方面可能会有些许差异，关于这个具体后面我会做一些实验，总结出一篇文章出来。\n\n​\t那么闲话不多说我们开始。\n\n##### 环境要求：\n\n- macOS\n- Homebrew\n\n\n- Node\n- Npm\n- Xcode (编译iOS)\n- Android Studio （编译安卓）\n- Weex-toolkit\n- Weexpack\n\n是不是站一看有点多，没关系，我一条一条慢慢说，因为我个人使用的环境是Mac，所以以下配置过程都是在Mac中完成的，请酌情参考。\n\n​\tHomebrew是Mac系统平台上的包管理器，是神器，墙裂建议安装。不过这里你也必须安装~。~，假如你的Mac上没有安装Homebrew,请先安装。安装方法：\n\n~~~\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n~~~\n\n​\tNode.js是一个基于Chrome V8引擎的JavaScript运行环境，编译JS代码需要的环境。这一步就需要上面brew安装完成。\n\n~~~\nbrew install node\n~~~\n\n​\t安装完成后检测是否安装成功，建议安装至最新版本。\n\n~~~\nnode -v\nnpm -v\n~~~\n\n![](node-v.png)\t\n\n​\tNpm是Node自带的包管理工具，类似于iOS领域中的Pod，在我们安装Node的时候也会把npm安装上。可以设置npm镜像加速下面步骤的速度。\n\n~~~\nnpm config set registry https://registry.npm.taobao.org --global\nnpm config set disturl https://npm.taobao.org/dist --global\n~~~\n\n​\tXcode和Android Studio都是为了编译不同平台的工具。\n\n​\tWeex-toolkit是官方的一个工具，可以用来创建，调试，打包Weex项目。这里有个巨坑，如果遇到权限问题千万不要使用sudo安装，sudo安装会导致后面不能调试等一系列问题。如果在不使用sudo的时候还遇到权限问题，参考GitHub的weex-toolkit的QA部分。\n\n~~~\nnpm install -g weex-toolkit\n~~~\n\n​\t安装成功后是这样子的，我这里有个提示更新的提示，正常的话应该是没有。![weex](weex.png)\n\n​\tWeexpack是新一代的weex应用工程和插件工程开发套件，是基于weex快速搭建应用原型的利器。它能够帮助开发者通过命令行创建weex应用工程和插件工程，快速打包 weex 应用并安装到手机运行，对于具有分享精神的开发者而言还能够创建weex插件模版并发布插件到weex应用市场。 使用weexpack 能够方便的在在weex工程和native工程中安装插件。\n\n​\t简单的说，如果使用Weex做单页面那么Weex-toolkit就可以了，如果整个App都使用Weex开发，那么Weexpack比较方便，并且在调试不同平台的时候，个人觉得比较好用。\n\n~~~\nnpm install -g weexpack //全局安装\n~~~\n\n##### 创建工程\n\n​\t配置好环境之后，我们就可以使用weexpack开始创建工程了。使用weexpack可以让我们快捷的生成iOS和安卓平台的工程模板，目的是在各自平台的模拟器或者真机上可以查看 Weex 运行的效果。\n\n~~~\nweexpack create 你的工程名\n~~~\n\n​\t生成好工程之后cd，进入工程目录里面，进行npm install安装一些依赖包，这一步有点像iOS上面的pod install。\n\n~~~\ncd 你的工程名\nnpm install\n~~~\n\n​\t这就是生成好的项目目录结构。\n\n![](image-index.png)\n\n​\t上面提到过，我们可以使用weexpack生成iOS和安卓平台的工程模板。输入下面的命令后，我们可以在工程目录里的platforms里发现相关代码。\n\n~~~\nweexpack platform add ios\nweexpack platform add android\n~~~\n\n​\t刚才生成的工程里的helloweex代码就是位于/src/index.vue文件里，Weex使用了Vue框架，所以这里也是Vue类型的文件。\n\n~~~vue\n<template>\n  <div class=\"wrapper\" @click=\"update\">\n    <image :src=\"logoUrl\" class=\"logo\"></image>\n    <text class=\"title\">Hello {{target}}</text>\n    <text class=\"desc\">Now, let's use vue to build your weex app.</text>\n  </div>\n</template>\n\n<style>\n  .wrapper { align-items: center; margin-top: 120px; }\n  .title { padding-top:40px; padding-bottom: 40px; font-size: 48px; }\n  .logo { width: 360px; height: 156px; }\n  .desc { padding-top: 20px; color:#888; font-size: 24px;}\n</style>\n\n<script>\n  export default {\n    data: {\n      logoUrl: 'http://img1.vued.vanthink.cn/vued08aa73a9ab65dcbd360ec54659ada97c.png',\n      target: 'World'\n    },\n    methods: {\n      update: function (e) {\n        this.target = 'Weex'\n        console.log('target:', this.target)\n      }\n    }\n  }\n</script>\n~~~\n\n##### 运行效果\n\n​\t首先我们看一下在web端运行的效果，建议都加上sudo权限。\n\n~~~\nnpm run build //源码打包，生成 JS Bundle\nnpm run dev //webpack watch 模式，方便开发\nnpm run serve //开启HotReload服务器，代码改动的将会实时同步到网页中\n~~~\n\n​\t打包成功\n\n![](dabaochenggong.png)\t\t  \n\n​\tweb运行效果\n\n![](webbuild.png)\n\n​\tweb运行成功之后我们去试试模拟器的运行效果，因为目前博主只是安装了Xcode，所以就试一下在iOS平台的效果吧。官方的指令weex run ios命令问题很多，我们只使用build命令，运行还是自己手动去运行，当然在执行build命令之前，前面的add platform命令是前置条件。\n\n~~~\nweex build ios\n~~~\n\n​\t在运行到需要输入APPID的时候control+c退出，这里可以自己使用xcode自由修改。\n\n![](podinstall.png)\n\n​\tbuild之后我们就可以去找生成好的代码运行了。位置在platforms/ios/weexDemo.xcworkspace打开使用xcode运行。\n\n![](ios.png)\n\n至此我们已经进入了weex。","source":"_posts/与Weex的第一次亲密接触—初识.md","raw":"---\ntitle: 与Weex的第一次亲密接触—初识\ndate: 2017-11-20 09:39:15\ntags:\n---\n\n#### Weex—初识\n\n​\t大前端统一开发方案当前在市场上有很多，从去年的ReacNative特别火，到后来阿里推出的Weex等，一直想从某种角度入手去学习一些除iOS原生开发之外的一些东西，经过对比之后，感觉Weex比较适合，她的优势是轻量，灵活，和原生一样的流畅度，热更新，三端统一，但是缺点也很明显，也是RN一样具有的，不能全面的覆盖移动端的特性，每年移动端都会出一些新的特性，比如今年推出的人脸识别。此外，在性能方面可能会有些许差异，关于这个具体后面我会做一些实验，总结出一篇文章出来。\n\n​\t那么闲话不多说我们开始。\n\n##### 环境要求：\n\n- macOS\n- Homebrew\n\n\n- Node\n- Npm\n- Xcode (编译iOS)\n- Android Studio （编译安卓）\n- Weex-toolkit\n- Weexpack\n\n是不是站一看有点多，没关系，我一条一条慢慢说，因为我个人使用的环境是Mac，所以以下配置过程都是在Mac中完成的，请酌情参考。\n\n​\tHomebrew是Mac系统平台上的包管理器，是神器，墙裂建议安装。不过这里你也必须安装~。~，假如你的Mac上没有安装Homebrew,请先安装。安装方法：\n\n~~~\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n~~~\n\n​\tNode.js是一个基于Chrome V8引擎的JavaScript运行环境，编译JS代码需要的环境。这一步就需要上面brew安装完成。\n\n~~~\nbrew install node\n~~~\n\n​\t安装完成后检测是否安装成功，建议安装至最新版本。\n\n~~~\nnode -v\nnpm -v\n~~~\n\n![](node-v.png)\t\n\n​\tNpm是Node自带的包管理工具，类似于iOS领域中的Pod，在我们安装Node的时候也会把npm安装上。可以设置npm镜像加速下面步骤的速度。\n\n~~~\nnpm config set registry https://registry.npm.taobao.org --global\nnpm config set disturl https://npm.taobao.org/dist --global\n~~~\n\n​\tXcode和Android Studio都是为了编译不同平台的工具。\n\n​\tWeex-toolkit是官方的一个工具，可以用来创建，调试，打包Weex项目。这里有个巨坑，如果遇到权限问题千万不要使用sudo安装，sudo安装会导致后面不能调试等一系列问题。如果在不使用sudo的时候还遇到权限问题，参考GitHub的weex-toolkit的QA部分。\n\n~~~\nnpm install -g weex-toolkit\n~~~\n\n​\t安装成功后是这样子的，我这里有个提示更新的提示，正常的话应该是没有。![weex](weex.png)\n\n​\tWeexpack是新一代的weex应用工程和插件工程开发套件，是基于weex快速搭建应用原型的利器。它能够帮助开发者通过命令行创建weex应用工程和插件工程，快速打包 weex 应用并安装到手机运行，对于具有分享精神的开发者而言还能够创建weex插件模版并发布插件到weex应用市场。 使用weexpack 能够方便的在在weex工程和native工程中安装插件。\n\n​\t简单的说，如果使用Weex做单页面那么Weex-toolkit就可以了，如果整个App都使用Weex开发，那么Weexpack比较方便，并且在调试不同平台的时候，个人觉得比较好用。\n\n~~~\nnpm install -g weexpack //全局安装\n~~~\n\n##### 创建工程\n\n​\t配置好环境之后，我们就可以使用weexpack开始创建工程了。使用weexpack可以让我们快捷的生成iOS和安卓平台的工程模板，目的是在各自平台的模拟器或者真机上可以查看 Weex 运行的效果。\n\n~~~\nweexpack create 你的工程名\n~~~\n\n​\t生成好工程之后cd，进入工程目录里面，进行npm install安装一些依赖包，这一步有点像iOS上面的pod install。\n\n~~~\ncd 你的工程名\nnpm install\n~~~\n\n​\t这就是生成好的项目目录结构。\n\n![](image-index.png)\n\n​\t上面提到过，我们可以使用weexpack生成iOS和安卓平台的工程模板。输入下面的命令后，我们可以在工程目录里的platforms里发现相关代码。\n\n~~~\nweexpack platform add ios\nweexpack platform add android\n~~~\n\n​\t刚才生成的工程里的helloweex代码就是位于/src/index.vue文件里，Weex使用了Vue框架，所以这里也是Vue类型的文件。\n\n~~~vue\n<template>\n  <div class=\"wrapper\" @click=\"update\">\n    <image :src=\"logoUrl\" class=\"logo\"></image>\n    <text class=\"title\">Hello {{target}}</text>\n    <text class=\"desc\">Now, let's use vue to build your weex app.</text>\n  </div>\n</template>\n\n<style>\n  .wrapper { align-items: center; margin-top: 120px; }\n  .title { padding-top:40px; padding-bottom: 40px; font-size: 48px; }\n  .logo { width: 360px; height: 156px; }\n  .desc { padding-top: 20px; color:#888; font-size: 24px;}\n</style>\n\n<script>\n  export default {\n    data: {\n      logoUrl: 'http://img1.vued.vanthink.cn/vued08aa73a9ab65dcbd360ec54659ada97c.png',\n      target: 'World'\n    },\n    methods: {\n      update: function (e) {\n        this.target = 'Weex'\n        console.log('target:', this.target)\n      }\n    }\n  }\n</script>\n~~~\n\n##### 运行效果\n\n​\t首先我们看一下在web端运行的效果，建议都加上sudo权限。\n\n~~~\nnpm run build //源码打包，生成 JS Bundle\nnpm run dev //webpack watch 模式，方便开发\nnpm run serve //开启HotReload服务器，代码改动的将会实时同步到网页中\n~~~\n\n​\t打包成功\n\n![](dabaochenggong.png)\t\t  \n\n​\tweb运行效果\n\n![](webbuild.png)\n\n​\tweb运行成功之后我们去试试模拟器的运行效果，因为目前博主只是安装了Xcode，所以就试一下在iOS平台的效果吧。官方的指令weex run ios命令问题很多，我们只使用build命令，运行还是自己手动去运行，当然在执行build命令之前，前面的add platform命令是前置条件。\n\n~~~\nweex build ios\n~~~\n\n​\t在运行到需要输入APPID的时候control+c退出，这里可以自己使用xcode自由修改。\n\n![](podinstall.png)\n\n​\tbuild之后我们就可以去找生成好的代码运行了。位置在platforms/ios/weexDemo.xcworkspace打开使用xcode运行。\n\n![](ios.png)\n\n至此我们已经进入了weex。","slug":"与Weex的第一次亲密接触—初识","published":1,"updated":"2017-11-20T12:16:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaag2mrj0001hgodnmy4duny","content":"<h4 id=\"Weex&#x2014;&#x521D;&#x8BC6;\"><a href=\"#Weex&#x2014;&#x521D;&#x8BC6;\" class=\"headerlink\" title=\"Weex&#x2014;&#x521D;&#x8BC6;\"></a>Weex&#x2014;&#x521D;&#x8BC6;</h4><p>&#x200B;    &#x5927;&#x524D;&#x7AEF;&#x7EDF;&#x4E00;&#x5F00;&#x53D1;&#x65B9;&#x6848;&#x5F53;&#x524D;&#x5728;&#x5E02;&#x573A;&#x4E0A;&#x6709;&#x5F88;&#x591A;&#xFF0C;&#x4ECE;&#x53BB;&#x5E74;&#x7684;ReacNative&#x7279;&#x522B;&#x706B;&#xFF0C;&#x5230;&#x540E;&#x6765;&#x963F;&#x91CC;&#x63A8;&#x51FA;&#x7684;Weex&#x7B49;&#xFF0C;&#x4E00;&#x76F4;&#x60F3;&#x4ECE;&#x67D0;&#x79CD;&#x89D2;&#x5EA6;&#x5165;&#x624B;&#x53BB;&#x5B66;&#x4E60;&#x4E00;&#x4E9B;&#x9664;iOS&#x539F;&#x751F;&#x5F00;&#x53D1;&#x4E4B;&#x5916;&#x7684;&#x4E00;&#x4E9B;&#x4E1C;&#x897F;&#xFF0C;&#x7ECF;&#x8FC7;&#x5BF9;&#x6BD4;&#x4E4B;&#x540E;&#xFF0C;&#x611F;&#x89C9;Weex&#x6BD4;&#x8F83;&#x9002;&#x5408;&#xFF0C;&#x5979;&#x7684;&#x4F18;&#x52BF;&#x662F;&#x8F7B;&#x91CF;&#xFF0C;&#x7075;&#x6D3B;&#xFF0C;&#x548C;&#x539F;&#x751F;&#x4E00;&#x6837;&#x7684;&#x6D41;&#x7545;&#x5EA6;&#xFF0C;&#x70ED;&#x66F4;&#x65B0;&#xFF0C;&#x4E09;&#x7AEF;&#x7EDF;&#x4E00;&#xFF0C;&#x4F46;&#x662F;&#x7F3A;&#x70B9;&#x4E5F;&#x5F88;&#x660E;&#x663E;&#xFF0C;&#x4E5F;&#x662F;RN&#x4E00;&#x6837;&#x5177;&#x6709;&#x7684;&#xFF0C;&#x4E0D;&#x80FD;&#x5168;&#x9762;&#x7684;&#x8986;&#x76D6;&#x79FB;&#x52A8;&#x7AEF;&#x7684;&#x7279;&#x6027;&#xFF0C;&#x6BCF;&#x5E74;&#x79FB;&#x52A8;&#x7AEF;&#x90FD;&#x4F1A;&#x51FA;&#x4E00;&#x4E9B;&#x65B0;&#x7684;&#x7279;&#x6027;&#xFF0C;&#x6BD4;&#x5982;&#x4ECA;&#x5E74;&#x63A8;&#x51FA;&#x7684;&#x4EBA;&#x8138;&#x8BC6;&#x522B;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x5728;&#x6027;&#x80FD;&#x65B9;&#x9762;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x4E9B;&#x8BB8;&#x5DEE;&#x5F02;&#xFF0C;&#x5173;&#x4E8E;&#x8FD9;&#x4E2A;&#x5177;&#x4F53;&#x540E;&#x9762;&#x6211;&#x4F1A;&#x505A;&#x4E00;&#x4E9B;&#x5B9E;&#x9A8C;&#xFF0C;&#x603B;&#x7ED3;&#x51FA;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x51FA;&#x6765;&#x3002;</p>\n<p>&#x200B;    &#x90A3;&#x4E48;&#x95F2;&#x8BDD;&#x4E0D;&#x591A;&#x8BF4;&#x6211;&#x4EEC;&#x5F00;&#x59CB;&#x3002;</p>\n<h5 id=\"&#x73AF;&#x5883;&#x8981;&#x6C42;&#xFF1A;\"><a href=\"#&#x73AF;&#x5883;&#x8981;&#x6C42;&#xFF1A;\" class=\"headerlink\" title=\"&#x73AF;&#x5883;&#x8981;&#x6C42;&#xFF1A;\"></a>&#x73AF;&#x5883;&#x8981;&#x6C42;&#xFF1A;</h5><ul class=\"ui list\">\n<li>macOS</li>\n<li>Homebrew</li>\n</ul>\n<ul class=\"ui list\">\n<li>Node</li>\n<li>Npm</li>\n<li>Xcode (&#x7F16;&#x8BD1;iOS)</li>\n<li>Android Studio &#xFF08;&#x7F16;&#x8BD1;&#x5B89;&#x5353;&#xFF09;</li>\n<li>Weex-toolkit</li>\n<li>Weexpack</li>\n</ul>\n<p>&#x662F;&#x4E0D;&#x662F;&#x7AD9;&#x4E00;&#x770B;&#x6709;&#x70B9;&#x591A;&#xFF0C;&#x6CA1;&#x5173;&#x7CFB;&#xFF0C;&#x6211;&#x4E00;&#x6761;&#x4E00;&#x6761;&#x6162;&#x6162;&#x8BF4;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x4E2A;&#x4EBA;&#x4F7F;&#x7528;&#x7684;&#x73AF;&#x5883;&#x662F;Mac&#xFF0C;&#x6240;&#x4EE5;&#x4EE5;&#x4E0B;&#x914D;&#x7F6E;&#x8FC7;&#x7A0B;&#x90FD;&#x662F;&#x5728;Mac&#x4E2D;&#x5B8C;&#x6210;&#x7684;&#xFF0C;&#x8BF7;&#x914C;&#x60C5;&#x53C2;&#x8003;&#x3002;</p>\n<p>&#x200B;    Homebrew&#x662F;Mac&#x7CFB;&#x7EDF;&#x5E73;&#x53F0;&#x4E0A;&#x7684;&#x5305;&#x7BA1;&#x7406;&#x5668;&#xFF0C;&#x662F;&#x795E;&#x5668;&#xFF0C;&#x5899;&#x88C2;&#x5EFA;&#x8BAE;&#x5B89;&#x88C5;&#x3002;&#x4E0D;&#x8FC7;&#x8FD9;&#x91CC;&#x4F60;&#x4E5F;&#x5FC5;&#x987B;&#x5B89;&#x88C5;~&#x3002;~&#xFF0C;&#x5047;&#x5982;&#x4F60;&#x7684;Mac&#x4E0A;&#x6CA1;&#x6709;&#x5B89;&#x88C5;Homebrew,&#x8BF7;&#x5148;&#x5B89;&#x88C5;&#x3002;&#x5B89;&#x88C5;&#x65B9;&#x6CD5;&#xFF1A;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>\n<p>&#x200B;    Node.js&#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x4E8E;Chrome V8&#x5F15;&#x64CE;&#x7684;JavaScript&#x8FD0;&#x884C;&#x73AF;&#x5883;&#xFF0C;&#x7F16;&#x8BD1;JS&#x4EE3;&#x7801;&#x9700;&#x8981;&#x7684;&#x73AF;&#x5883;&#x3002;&#x8FD9;&#x4E00;&#x6B65;&#x5C31;&#x9700;&#x8981;&#x4E0A;&#x9762;brew&#x5B89;&#x88C5;&#x5B8C;&#x6210;&#x3002;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install node</div></pre></td></tr></table></figure>\n<p>&#x200B;    &#x5B89;&#x88C5;&#x5B8C;&#x6210;&#x540E;&#x68C0;&#x6D4B;&#x662F;&#x5426;&#x5B89;&#x88C5;&#x6210;&#x529F;&#xFF0C;&#x5EFA;&#x8BAE;&#x5B89;&#x88C5;&#x81F3;&#x6700;&#x65B0;&#x7248;&#x672C;&#x3002;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div><div class=\"line\">npm -v</div></pre></td></tr></table></figure>\n<p><a class=\"magnific-img\" href=\"/2017/11/20/&#x4E0E;Weex&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;&#x2014;&#x521D;&#x8BC6;/node-v.png\"><img src=\"/2017/11/20/&#x4E0E;Weex&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;&#x2014;&#x521D;&#x8BC6;/node-v.png\" alt=\"\" class=\"ui centered image\"></a>    </p>\n<p>&#x200B;    Npm&#x662F;Node&#x81EA;&#x5E26;&#x7684;&#x5305;&#x7BA1;&#x7406;&#x5DE5;&#x5177;&#xFF0C;&#x7C7B;&#x4F3C;&#x4E8E;iOS&#x9886;&#x57DF;&#x4E2D;&#x7684;Pod&#xFF0C;&#x5728;&#x6211;&#x4EEC;&#x5B89;&#x88C5;Node&#x7684;&#x65F6;&#x5019;&#x4E5F;&#x4F1A;&#x628A;npm&#x5B89;&#x88C5;&#x4E0A;&#x3002;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;npm&#x955C;&#x50CF;&#x52A0;&#x901F;&#x4E0B;&#x9762;&#x6B65;&#x9AA4;&#x7684;&#x901F;&#x5EA6;&#x3002;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config set registry https://registry.npm.taobao.org --global</div><div class=\"line\">npm config set disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>\n<p>&#x200B;    Xcode&#x548C;Android Studio&#x90FD;&#x662F;&#x4E3A;&#x4E86;&#x7F16;&#x8BD1;&#x4E0D;&#x540C;&#x5E73;&#x53F0;&#x7684;&#x5DE5;&#x5177;&#x3002;</p>\n<p>&#x200B;    Weex-toolkit&#x662F;&#x5B98;&#x65B9;&#x7684;&#x4E00;&#x4E2A;&#x5DE5;&#x5177;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x521B;&#x5EFA;&#xFF0C;&#x8C03;&#x8BD5;&#xFF0C;&#x6253;&#x5305;Weex&#x9879;&#x76EE;&#x3002;&#x8FD9;&#x91CC;&#x6709;&#x4E2A;&#x5DE8;&#x5751;&#xFF0C;&#x5982;&#x679C;&#x9047;&#x5230;&#x6743;&#x9650;&#x95EE;&#x9898;&#x5343;&#x4E07;&#x4E0D;&#x8981;&#x4F7F;&#x7528;sudo&#x5B89;&#x88C5;&#xFF0C;sudo&#x5B89;&#x88C5;&#x4F1A;&#x5BFC;&#x81F4;&#x540E;&#x9762;&#x4E0D;&#x80FD;&#x8C03;&#x8BD5;&#x7B49;&#x4E00;&#x7CFB;&#x5217;&#x95EE;&#x9898;&#x3002;&#x5982;&#x679C;&#x5728;&#x4E0D;&#x4F7F;&#x7528;sudo&#x7684;&#x65F6;&#x5019;&#x8FD8;&#x9047;&#x5230;&#x6743;&#x9650;&#x95EE;&#x9898;&#xFF0C;&#x53C2;&#x8003;GitHub&#x7684;weex-toolkit&#x7684;QA&#x90E8;&#x5206;&#x3002;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g weex-toolkit</div></pre></td></tr></table></figure>\n<p>&#x200B;    &#x5B89;&#x88C5;&#x6210;&#x529F;&#x540E;&#x662F;&#x8FD9;&#x6837;&#x5B50;&#x7684;&#xFF0C;&#x6211;&#x8FD9;&#x91CC;&#x6709;&#x4E2A;&#x63D0;&#x793A;&#x66F4;&#x65B0;&#x7684;&#x63D0;&#x793A;&#xFF0C;&#x6B63;&#x5E38;&#x7684;&#x8BDD;&#x5E94;&#x8BE5;&#x662F;&#x6CA1;&#x6709;&#x3002;<a class=\"magnific-img\" href=\"/2017/11/20/&#x4E0E;Weex&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;&#x2014;&#x521D;&#x8BC6;/weex.png\"><img src=\"/2017/11/20/&#x4E0E;Weex&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;&#x2014;&#x521D;&#x8BC6;/weex.png\" alt=\"weex\" class=\"ui centered image\"></a></p>\n<p>&#x200B;    Weexpack&#x662F;&#x65B0;&#x4E00;&#x4EE3;&#x7684;weex&#x5E94;&#x7528;&#x5DE5;&#x7A0B;&#x548C;&#x63D2;&#x4EF6;&#x5DE5;&#x7A0B;&#x5F00;&#x53D1;&#x5957;&#x4EF6;&#xFF0C;&#x662F;&#x57FA;&#x4E8E;weex&#x5FEB;&#x901F;&#x642D;&#x5EFA;&#x5E94;&#x7528;&#x539F;&#x578B;&#x7684;&#x5229;&#x5668;&#x3002;&#x5B83;&#x80FD;&#x591F;&#x5E2E;&#x52A9;&#x5F00;&#x53D1;&#x8005;&#x901A;&#x8FC7;&#x547D;&#x4EE4;&#x884C;&#x521B;&#x5EFA;weex&#x5E94;&#x7528;&#x5DE5;&#x7A0B;&#x548C;&#x63D2;&#x4EF6;&#x5DE5;&#x7A0B;&#xFF0C;&#x5FEB;&#x901F;&#x6253;&#x5305; weex &#x5E94;&#x7528;&#x5E76;&#x5B89;&#x88C5;&#x5230;&#x624B;&#x673A;&#x8FD0;&#x884C;&#xFF0C;&#x5BF9;&#x4E8E;&#x5177;&#x6709;&#x5206;&#x4EAB;&#x7CBE;&#x795E;&#x7684;&#x5F00;&#x53D1;&#x8005;&#x800C;&#x8A00;&#x8FD8;&#x80FD;&#x591F;&#x521B;&#x5EFA;weex&#x63D2;&#x4EF6;&#x6A21;&#x7248;&#x5E76;&#x53D1;&#x5E03;&#x63D2;&#x4EF6;&#x5230;weex&#x5E94;&#x7528;&#x5E02;&#x573A;&#x3002; &#x4F7F;&#x7528;weexpack &#x80FD;&#x591F;&#x65B9;&#x4FBF;&#x7684;&#x5728;&#x5728;weex&#x5DE5;&#x7A0B;&#x548C;native&#x5DE5;&#x7A0B;&#x4E2D;&#x5B89;&#x88C5;&#x63D2;&#x4EF6;&#x3002;</p>\n<p>&#x200B;    &#x7B80;&#x5355;&#x7684;&#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x4F7F;&#x7528;Weex&#x505A;&#x5355;&#x9875;&#x9762;&#x90A3;&#x4E48;Weex-toolkit&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x5982;&#x679C;&#x6574;&#x4E2A;App&#x90FD;&#x4F7F;&#x7528;Weex&#x5F00;&#x53D1;&#xFF0C;&#x90A3;&#x4E48;Weexpack&#x6BD4;&#x8F83;&#x65B9;&#x4FBF;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x8C03;&#x8BD5;&#x4E0D;&#x540C;&#x5E73;&#x53F0;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E2A;&#x4EBA;&#x89C9;&#x5F97;&#x6BD4;&#x8F83;&#x597D;&#x7528;&#x3002;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g weexpack //&#x5168;&#x5C40;&#x5B89;&#x88C5;</div></pre></td></tr></table></figure>\n<h5 id=\"&#x521B;&#x5EFA;&#x5DE5;&#x7A0B;\"><a href=\"#&#x521B;&#x5EFA;&#x5DE5;&#x7A0B;\" class=\"headerlink\" title=\"&#x521B;&#x5EFA;&#x5DE5;&#x7A0B;\"></a>&#x521B;&#x5EFA;&#x5DE5;&#x7A0B;</h5><p>&#x200B;    &#x914D;&#x7F6E;&#x597D;&#x73AF;&#x5883;&#x4E4B;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;weexpack&#x5F00;&#x59CB;&#x521B;&#x5EFA;&#x5DE5;&#x7A0B;&#x4E86;&#x3002;&#x4F7F;&#x7528;weexpack&#x53EF;&#x4EE5;&#x8BA9;&#x6211;&#x4EEC;&#x5FEB;&#x6377;&#x7684;&#x751F;&#x6210;iOS&#x548C;&#x5B89;&#x5353;&#x5E73;&#x53F0;&#x7684;&#x5DE5;&#x7A0B;&#x6A21;&#x677F;&#xFF0C;&#x76EE;&#x7684;&#x662F;&#x5728;&#x5404;&#x81EA;&#x5E73;&#x53F0;&#x7684;&#x6A21;&#x62DF;&#x5668;&#x6216;&#x8005;&#x771F;&#x673A;&#x4E0A;&#x53EF;&#x4EE5;&#x67E5;&#x770B; Weex &#x8FD0;&#x884C;&#x7684;&#x6548;&#x679C;&#x3002;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">weexpack create &#x4F60;&#x7684;&#x5DE5;&#x7A0B;&#x540D;</div></pre></td></tr></table></figure>\n<p>&#x200B;    &#x751F;&#x6210;&#x597D;&#x5DE5;&#x7A0B;&#x4E4B;&#x540E;cd&#xFF0C;&#x8FDB;&#x5165;&#x5DE5;&#x7A0B;&#x76EE;&#x5F55;&#x91CC;&#x9762;&#xFF0C;&#x8FDB;&#x884C;npm install&#x5B89;&#x88C5;&#x4E00;&#x4E9B;&#x4F9D;&#x8D56;&#x5305;&#xFF0C;&#x8FD9;&#x4E00;&#x6B65;&#x6709;&#x70B9;&#x50CF;iOS&#x4E0A;&#x9762;&#x7684;pod install&#x3002;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd &#x4F60;&#x7684;&#x5DE5;&#x7A0B;&#x540D;</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>&#x200B;    &#x8FD9;&#x5C31;&#x662F;&#x751F;&#x6210;&#x597D;&#x7684;&#x9879;&#x76EE;&#x76EE;&#x5F55;&#x7ED3;&#x6784;&#x3002;</p>\n<p><a class=\"magnific-img\" href=\"/2017/11/20/&#x4E0E;Weex&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;&#x2014;&#x521D;&#x8BC6;/image-index.png\"><img src=\"/2017/11/20/&#x4E0E;Weex&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;&#x2014;&#x521D;&#x8BC6;/image-index.png\" alt=\"\" class=\"ui centered image\"></a></p>\n<p>&#x200B;    &#x4E0A;&#x9762;&#x63D0;&#x5230;&#x8FC7;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;weexpack&#x751F;&#x6210;iOS&#x548C;&#x5B89;&#x5353;&#x5E73;&#x53F0;&#x7684;&#x5DE5;&#x7A0B;&#x6A21;&#x677F;&#x3002;&#x8F93;&#x5165;&#x4E0B;&#x9762;&#x7684;&#x547D;&#x4EE4;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5728;&#x5DE5;&#x7A0B;&#x76EE;&#x5F55;&#x91CC;&#x7684;platforms&#x91CC;&#x53D1;&#x73B0;&#x76F8;&#x5173;&#x4EE3;&#x7801;&#x3002;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">weexpack platform add ios</div><div class=\"line\">weexpack platform add android</div></pre></td></tr></table></figure>\n<p>&#x200B;    &#x521A;&#x624D;&#x751F;&#x6210;&#x7684;&#x5DE5;&#x7A0B;&#x91CC;&#x7684;helloweex&#x4EE3;&#x7801;&#x5C31;&#x662F;&#x4F4D;&#x4E8E;/src/index.vue&#x6587;&#x4EF6;&#x91CC;&#xFF0C;Weex&#x4F7F;&#x7528;&#x4E86;Vue&#x6846;&#x67B6;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x91CC;&#x4E5F;&#x662F;Vue&#x7C7B;&#x578B;&#x7684;&#x6587;&#x4EF6;&#x3002;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;div class=&quot;wrapper&quot; @click=&quot;update&quot;&gt;</div><div class=\"line\">    &lt;image :src=&quot;logoUrl&quot; class=&quot;logo&quot;&gt;&lt;/image&gt;</div><div class=\"line\">    &lt;text class=&quot;title&quot;&gt;Hello {{target}}&lt;/text&gt;</div><div class=\"line\">    &lt;text class=&quot;desc&quot;&gt;Now, let&apos;s use vue to build your weex app.&lt;/text&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">  .wrapper { align-items: center; margin-top: 120px; }</div><div class=\"line\">  .title { padding-top:40px; padding-bottom: 40px; font-size: 48px; }</div><div class=\"line\">  .logo { width: 360px; height: 156px; }</div><div class=\"line\">  .desc { padding-top: 20px; color:#888; font-size: 24px;}</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  export default {</div><div class=\"line\">    data: {</div><div class=\"line\">      logoUrl: &apos;http://img1.vued.vanthink.cn/vued08aa73a9ab65dcbd360ec54659ada97c.png&apos;,</div><div class=\"line\">      target: &apos;World&apos;</div><div class=\"line\">    },</div><div class=\"line\">    methods: {</div><div class=\"line\">      update: function (e) {</div><div class=\"line\">        this.target = &apos;Weex&apos;</div><div class=\"line\">        console.log(&apos;target:&apos;, this.target)</div><div class=\"line\">      }</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"&#x8FD0;&#x884C;&#x6548;&#x679C;\"><a href=\"#&#x8FD0;&#x884C;&#x6548;&#x679C;\" class=\"headerlink\" title=\"&#x8FD0;&#x884C;&#x6548;&#x679C;\"></a>&#x8FD0;&#x884C;&#x6548;&#x679C;</h5><p>&#x200B;    &#x9996;&#x5148;&#x6211;&#x4EEC;&#x770B;&#x4E00;&#x4E0B;&#x5728;web&#x7AEF;&#x8FD0;&#x884C;&#x7684;&#x6548;&#x679C;&#xFF0C;&#x5EFA;&#x8BAE;&#x90FD;&#x52A0;&#x4E0A;sudo&#x6743;&#x9650;&#x3002;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run build //&#x6E90;&#x7801;&#x6253;&#x5305;&#xFF0C;&#x751F;&#x6210; JS Bundle</div><div class=\"line\">npm run dev //webpack watch &#x6A21;&#x5F0F;&#xFF0C;&#x65B9;&#x4FBF;&#x5F00;&#x53D1;</div><div class=\"line\">npm run serve //&#x5F00;&#x542F;HotReload&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x4EE3;&#x7801;&#x6539;&#x52A8;&#x7684;&#x5C06;&#x4F1A;&#x5B9E;&#x65F6;&#x540C;&#x6B65;&#x5230;&#x7F51;&#x9875;&#x4E2D;</div></pre></td></tr></table></figure>\n<p>&#x200B;    &#x6253;&#x5305;&#x6210;&#x529F;</p>\n<p><a class=\"magnific-img\" href=\"/2017/11/20/&#x4E0E;Weex&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;&#x2014;&#x521D;&#x8BC6;/dabaochenggong.png\"><img src=\"/2017/11/20/&#x4E0E;Weex&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;&#x2014;&#x521D;&#x8BC6;/dabaochenggong.png\" alt=\"\" class=\"ui centered image\"></a>          </p>\n<p>&#x200B;    web&#x8FD0;&#x884C;&#x6548;&#x679C;</p>\n<p><a class=\"magnific-img\" href=\"/2017/11/20/&#x4E0E;Weex&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;&#x2014;&#x521D;&#x8BC6;/webbuild.png\"><img src=\"/2017/11/20/&#x4E0E;Weex&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;&#x2014;&#x521D;&#x8BC6;/webbuild.png\" alt=\"\" class=\"ui centered image\"></a></p>\n<p>&#x200B;    web&#x8FD0;&#x884C;&#x6210;&#x529F;&#x4E4B;&#x540E;&#x6211;&#x4EEC;&#x53BB;&#x8BD5;&#x8BD5;&#x6A21;&#x62DF;&#x5668;&#x7684;&#x8FD0;&#x884C;&#x6548;&#x679C;&#xFF0C;&#x56E0;&#x4E3A;&#x76EE;&#x524D;&#x535A;&#x4E3B;&#x53EA;&#x662F;&#x5B89;&#x88C5;&#x4E86;Xcode&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x8BD5;&#x4E00;&#x4E0B;&#x5728;iOS&#x5E73;&#x53F0;&#x7684;&#x6548;&#x679C;&#x5427;&#x3002;&#x5B98;&#x65B9;&#x7684;&#x6307;&#x4EE4;weex run ios&#x547D;&#x4EE4;&#x95EE;&#x9898;&#x5F88;&#x591A;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x4F7F;&#x7528;build&#x547D;&#x4EE4;&#xFF0C;&#x8FD0;&#x884C;&#x8FD8;&#x662F;&#x81EA;&#x5DF1;&#x624B;&#x52A8;&#x53BB;&#x8FD0;&#x884C;&#xFF0C;&#x5F53;&#x7136;&#x5728;&#x6267;&#x884C;build&#x547D;&#x4EE4;&#x4E4B;&#x524D;&#xFF0C;&#x524D;&#x9762;&#x7684;add platform&#x547D;&#x4EE4;&#x662F;&#x524D;&#x7F6E;&#x6761;&#x4EF6;&#x3002;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">weex build ios</div></pre></td></tr></table></figure>\n<p>&#x200B;    &#x5728;&#x8FD0;&#x884C;&#x5230;&#x9700;&#x8981;&#x8F93;&#x5165;APPID&#x7684;&#x65F6;&#x5019;control+c&#x9000;&#x51FA;&#xFF0C;&#x8FD9;&#x91CC;&#x53EF;&#x4EE5;&#x81EA;&#x5DF1;&#x4F7F;&#x7528;xcode&#x81EA;&#x7531;&#x4FEE;&#x6539;&#x3002;</p>\n<p><a class=\"magnific-img\" href=\"/2017/11/20/&#x4E0E;Weex&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;&#x2014;&#x521D;&#x8BC6;/podinstall.png\"><img src=\"/2017/11/20/&#x4E0E;Weex&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;&#x2014;&#x521D;&#x8BC6;/podinstall.png\" alt=\"\" class=\"ui centered image\"></a></p>\n<p>&#x200B;    build&#x4E4B;&#x540E;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x53BB;&#x627E;&#x751F;&#x6210;&#x597D;&#x7684;&#x4EE3;&#x7801;&#x8FD0;&#x884C;&#x4E86;&#x3002;&#x4F4D;&#x7F6E;&#x5728;platforms/ios/weexDemo.xcworkspace&#x6253;&#x5F00;&#x4F7F;&#x7528;xcode&#x8FD0;&#x884C;&#x3002;</p>\n<p><a class=\"magnific-img\" href=\"/2017/11/20/&#x4E0E;Weex&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;&#x2014;&#x521D;&#x8BC6;/ios.png\"><img src=\"/2017/11/20/&#x4E0E;Weex&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x4EB2;&#x5BC6;&#x63A5;&#x89E6;&#x2014;&#x521D;&#x8BC6;/ios.png\" alt=\"\" class=\"ui centered image\"></a></p>\n<p>&#x81F3;&#x6B64;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x8FDB;&#x5165;&#x4E86;weex&#x3002;</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Weex—初识\"><a href=\"#Weex—初识\" class=\"headerlink\" title=\"Weex—初识\"></a>Weex—初识</h4><p>​    大前端统一开发方案当前在市场上有很多，从去年的ReacNative特别火，到后来阿里推出的Weex等，一直想从某种角度入手去学习一些除iOS原生开发之外的一些东西，经过对比之后，感觉Weex比较适合，她的优势是轻量，灵活，和原生一样的流畅度，热更新，三端统一，但是缺点也很明显，也是RN一样具有的，不能全面的覆盖移动端的特性，每年移动端都会出一些新的特性，比如今年推出的人脸识别。此外，在性能方面可能会有些许差异，关于这个具体后面我会做一些实验，总结出一篇文章出来。</p>\n<p>​    那么闲话不多说我们开始。</p>\n<h5 id=\"环境要求：\"><a href=\"#环境要求：\" class=\"headerlink\" title=\"环境要求：\"></a>环境要求：</h5><ul>\n<li>macOS</li>\n<li>Homebrew</li>\n</ul>\n<ul>\n<li>Node</li>\n<li>Npm</li>\n<li>Xcode (编译iOS)</li>\n<li>Android Studio （编译安卓）</li>\n<li>Weex-toolkit</li>\n<li>Weexpack</li>\n</ul>\n<p>是不是站一看有点多，没关系，我一条一条慢慢说，因为我个人使用的环境是Mac，所以以下配置过程都是在Mac中完成的，请酌情参考。</p>\n<p>​    Homebrew是Mac系统平台上的包管理器，是神器，墙裂建议安装。不过这里你也必须安装~。~，假如你的Mac上没有安装Homebrew,请先安装。安装方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>\n<p>​    Node.js是一个基于Chrome V8引擎的JavaScript运行环境，编译JS代码需要的环境。这一步就需要上面brew安装完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install node</div></pre></td></tr></table></figure>\n<p>​    安装完成后检测是否安装成功，建议安装至最新版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div><div class=\"line\">npm -v</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/11/20/与Weex的第一次亲密接触—初识/node-v.png\" alt=\"\">    </p>\n<p>​    Npm是Node自带的包管理工具，类似于iOS领域中的Pod，在我们安装Node的时候也会把npm安装上。可以设置npm镜像加速下面步骤的速度。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config set registry https://registry.npm.taobao.org --global</div><div class=\"line\">npm config set disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>\n<p>​    Xcode和Android Studio都是为了编译不同平台的工具。</p>\n<p>​    Weex-toolkit是官方的一个工具，可以用来创建，调试，打包Weex项目。这里有个巨坑，如果遇到权限问题千万不要使用sudo安装，sudo安装会导致后面不能调试等一系列问题。如果在不使用sudo的时候还遇到权限问题，参考GitHub的weex-toolkit的QA部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g weex-toolkit</div></pre></td></tr></table></figure>\n<p>​    安装成功后是这样子的，我这里有个提示更新的提示，正常的话应该是没有。<img src=\"/2017/11/20/与Weex的第一次亲密接触—初识/weex.png\" alt=\"weex\"></p>\n<p>​    Weexpack是新一代的weex应用工程和插件工程开发套件，是基于weex快速搭建应用原型的利器。它能够帮助开发者通过命令行创建weex应用工程和插件工程，快速打包 weex 应用并安装到手机运行，对于具有分享精神的开发者而言还能够创建weex插件模版并发布插件到weex应用市场。 使用weexpack 能够方便的在在weex工程和native工程中安装插件。</p>\n<p>​    简单的说，如果使用Weex做单页面那么Weex-toolkit就可以了，如果整个App都使用Weex开发，那么Weexpack比较方便，并且在调试不同平台的时候，个人觉得比较好用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g weexpack //全局安装</div></pre></td></tr></table></figure>\n<h5 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h5><p>​    配置好环境之后，我们就可以使用weexpack开始创建工程了。使用weexpack可以让我们快捷的生成iOS和安卓平台的工程模板，目的是在各自平台的模拟器或者真机上可以查看 Weex 运行的效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">weexpack create 你的工程名</div></pre></td></tr></table></figure>\n<p>​    生成好工程之后cd，进入工程目录里面，进行npm install安装一些依赖包，这一步有点像iOS上面的pod install。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd 你的工程名</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>​    这就是生成好的项目目录结构。</p>\n<p><img src=\"/2017/11/20/与Weex的第一次亲密接触—初识/image-index.png\" alt=\"\"></p>\n<p>​    上面提到过，我们可以使用weexpack生成iOS和安卓平台的工程模板。输入下面的命令后，我们可以在工程目录里的platforms里发现相关代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">weexpack platform add ios</div><div class=\"line\">weexpack platform add android</div></pre></td></tr></table></figure>\n<p>​    刚才生成的工程里的helloweex代码就是位于/src/index.vue文件里，Weex使用了Vue框架，所以这里也是Vue类型的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;div class=&quot;wrapper&quot; @click=&quot;update&quot;&gt;</div><div class=\"line\">    &lt;image :src=&quot;logoUrl&quot; class=&quot;logo&quot;&gt;&lt;/image&gt;</div><div class=\"line\">    &lt;text class=&quot;title&quot;&gt;Hello &#123;&#123;target&#125;&#125;&lt;/text&gt;</div><div class=\"line\">    &lt;text class=&quot;desc&quot;&gt;Now, let&apos;s use vue to build your weex app.&lt;/text&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">  .wrapper &#123; align-items: center; margin-top: 120px; &#125;</div><div class=\"line\">  .title &#123; padding-top:40px; padding-bottom: 40px; font-size: 48px; &#125;</div><div class=\"line\">  .logo &#123; width: 360px; height: 156px; &#125;</div><div class=\"line\">  .desc &#123; padding-top: 20px; color:#888; font-size: 24px;&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  export default &#123;</div><div class=\"line\">    data: &#123;</div><div class=\"line\">      logoUrl: &apos;http://img1.vued.vanthink.cn/vued08aa73a9ab65dcbd360ec54659ada97c.png&apos;,</div><div class=\"line\">      target: &apos;World&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    methods: &#123;</div><div class=\"line\">      update: function (e) &#123;</div><div class=\"line\">        this.target = &apos;Weex&apos;</div><div class=\"line\">        console.log(&apos;target:&apos;, this.target)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"运行效果\"><a href=\"#运行效果\" class=\"headerlink\" title=\"运行效果\"></a>运行效果</h5><p>​    首先我们看一下在web端运行的效果，建议都加上sudo权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run build //源码打包，生成 JS Bundle</div><div class=\"line\">npm run dev //webpack watch 模式，方便开发</div><div class=\"line\">npm run serve //开启HotReload服务器，代码改动的将会实时同步到网页中</div></pre></td></tr></table></figure>\n<p>​    打包成功</p>\n<p><img src=\"/2017/11/20/与Weex的第一次亲密接触—初识/dabaochenggong.png\" alt=\"\">          </p>\n<p>​    web运行效果</p>\n<p><img src=\"/2017/11/20/与Weex的第一次亲密接触—初识/webbuild.png\" alt=\"\"></p>\n<p>​    web运行成功之后我们去试试模拟器的运行效果，因为目前博主只是安装了Xcode，所以就试一下在iOS平台的效果吧。官方的指令weex run ios命令问题很多，我们只使用build命令，运行还是自己手动去运行，当然在执行build命令之前，前面的add platform命令是前置条件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">weex build ios</div></pre></td></tr></table></figure>\n<p>​    在运行到需要输入APPID的时候control+c退出，这里可以自己使用xcode自由修改。</p>\n<p><img src=\"/2017/11/20/与Weex的第一次亲密接触—初识/podinstall.png\" alt=\"\"></p>\n<p>​    build之后我们就可以去找生成好的代码运行了。位置在platforms/ios/weexDemo.xcworkspace打开使用xcode运行。</p>\n<p><img src=\"/2017/11/20/与Weex的第一次亲密接触—初识/ios.png\" alt=\"\"></p>\n<p>至此我们已经进入了weex。</p>\n"},{"title":"什么样代码是好的？对于编写代码，人们常常会出现哪些误区？","_content":"##### 什么样代码是好的？对于编写代码，人们常常会出现哪些误区？\n\n- 代码是更多时间是用来维护的，其次才是实现功能的\n\n- 好的代码是可以进行良好的自我描述的，并不需要太多的注释，为了代码更好的维护，在无法写出一目了然的代码的时候，必要的注释是不能少的。切勿不能代码逻辑既复杂，还没有相应的注释或者文档说明。\n\n- 所有的设计模型和理论都只是手段，其实唯一的目标是在尽量提高（可维护性，可复用性=可测试性）等等的条件下实现业务需求。切不可形而上学，走教条主义，一味的追求固话的设计模式从而使得代码复杂难以理解和测试。\n\n  ##### 那么如何写出好的代码？\n\n  - code review  重点不是机器可以检查出来的代码错误或者一些细微的编写习惯，重点是代码的设计思路和模块的划分方法，对于实际情况中，小团队的集体重构是一个很好的选择\n  - 代码重构\n  - 阅读优秀的开源代码，或者组内优秀同学写出的代码，阅读自己身边人的代码好处是可以问问他们为什么这样写，为什么那样写，进步会很快。\n  - 最后是使用一些静态代码检查的工具进行代码检查。\n\n  ##### 常用的代码整洁技巧：\n\n  - 任何一个东西（class method var）都应该明确的负责某个单一概念的事情。\n  - 在编写一个功能点之前，对其实现方式进行一个大体的设计（如果是强数据相关的话，在脑海中把数据流串起来，必要的时候可以使用状态机的概念跟踪APP的变化），然后再完成细节实现代码。\n  - 类，方法，变量，名称的设计，函数和方法参数的设计，目的是尽量靠近让人一目了然的效果\n  - 对于任何的方法和类，无论是UI相关还是网络相关还是逻辑相关或者是数据处理相关，都必须准确的找到一个类的归属，并且这个归属是师出有名的。这就需要一个良好的概念定义和设计，（具体就是指，这些事情怎么分块，放在哪，之间怎么依赖）\n  - 对复杂继承的使用保持慎独的态度，如果套东西使用复杂继承关系并不是必要的，那么尽量不要使用。","source":"_posts/什么样代码是好的？对于编写代码，人们常常会出现哪些误区？.md","raw":"---\ntitle: 什么样代码是好的？对于编写代码，人们常常会出现哪些误区？\n---\n##### 什么样代码是好的？对于编写代码，人们常常会出现哪些误区？\n\n- 代码是更多时间是用来维护的，其次才是实现功能的\n\n- 好的代码是可以进行良好的自我描述的，并不需要太多的注释，为了代码更好的维护，在无法写出一目了然的代码的时候，必要的注释是不能少的。切勿不能代码逻辑既复杂，还没有相应的注释或者文档说明。\n\n- 所有的设计模型和理论都只是手段，其实唯一的目标是在尽量提高（可维护性，可复用性=可测试性）等等的条件下实现业务需求。切不可形而上学，走教条主义，一味的追求固话的设计模式从而使得代码复杂难以理解和测试。\n\n  ##### 那么如何写出好的代码？\n\n  - code review  重点不是机器可以检查出来的代码错误或者一些细微的编写习惯，重点是代码的设计思路和模块的划分方法，对于实际情况中，小团队的集体重构是一个很好的选择\n  - 代码重构\n  - 阅读优秀的开源代码，或者组内优秀同学写出的代码，阅读自己身边人的代码好处是可以问问他们为什么这样写，为什么那样写，进步会很快。\n  - 最后是使用一些静态代码检查的工具进行代码检查。\n\n  ##### 常用的代码整洁技巧：\n\n  - 任何一个东西（class method var）都应该明确的负责某个单一概念的事情。\n  - 在编写一个功能点之前，对其实现方式进行一个大体的设计（如果是强数据相关的话，在脑海中把数据流串起来，必要的时候可以使用状态机的概念跟踪APP的变化），然后再完成细节实现代码。\n  - 类，方法，变量，名称的设计，函数和方法参数的设计，目的是尽量靠近让人一目了然的效果\n  - 对于任何的方法和类，无论是UI相关还是网络相关还是逻辑相关或者是数据处理相关，都必须准确的找到一个类的归属，并且这个归属是师出有名的。这就需要一个良好的概念定义和设计，（具体就是指，这些事情怎么分块，放在哪，之间怎么依赖）\n  - 对复杂继承的使用保持慎独的态度，如果套东西使用复杂继承关系并不是必要的，那么尽量不要使用。","slug":"什么样代码是好的？对于编写代码，人们常常会出现哪些误区？","published":1,"date":"2017-08-28T11:10:39.000Z","updated":"2017-09-14T11:35:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaag2mrl0002hgod83xno347","content":"<h5 id=\"&#x4EC0;&#x4E48;&#x6837;&#x4EE3;&#x7801;&#x662F;&#x597D;&#x7684;&#xFF1F;&#x5BF9;&#x4E8E;&#x7F16;&#x5199;&#x4EE3;&#x7801;&#xFF0C;&#x4EBA;&#x4EEC;&#x5E38;&#x5E38;&#x4F1A;&#x51FA;&#x73B0;&#x54EA;&#x4E9B;&#x8BEF;&#x533A;&#xFF1F;\"><a href=\"#&#x4EC0;&#x4E48;&#x6837;&#x4EE3;&#x7801;&#x662F;&#x597D;&#x7684;&#xFF1F;&#x5BF9;&#x4E8E;&#x7F16;&#x5199;&#x4EE3;&#x7801;&#xFF0C;&#x4EBA;&#x4EEC;&#x5E38;&#x5E38;&#x4F1A;&#x51FA;&#x73B0;&#x54EA;&#x4E9B;&#x8BEF;&#x533A;&#xFF1F;\" class=\"headerlink\" title=\"&#x4EC0;&#x4E48;&#x6837;&#x4EE3;&#x7801;&#x662F;&#x597D;&#x7684;&#xFF1F;&#x5BF9;&#x4E8E;&#x7F16;&#x5199;&#x4EE3;&#x7801;&#xFF0C;&#x4EBA;&#x4EEC;&#x5E38;&#x5E38;&#x4F1A;&#x51FA;&#x73B0;&#x54EA;&#x4E9B;&#x8BEF;&#x533A;&#xFF1F;\"></a>&#x4EC0;&#x4E48;&#x6837;&#x4EE3;&#x7801;&#x662F;&#x597D;&#x7684;&#xFF1F;&#x5BF9;&#x4E8E;&#x7F16;&#x5199;&#x4EE3;&#x7801;&#xFF0C;&#x4EBA;&#x4EEC;&#x5E38;&#x5E38;&#x4F1A;&#x51FA;&#x73B0;&#x54EA;&#x4E9B;&#x8BEF;&#x533A;&#xFF1F;</h5><ul class=\"ui list\">\n<li><p>&#x4EE3;&#x7801;&#x662F;&#x66F4;&#x591A;&#x65F6;&#x95F4;&#x662F;&#x7528;&#x6765;&#x7EF4;&#x62A4;&#x7684;&#xFF0C;&#x5176;&#x6B21;&#x624D;&#x662F;&#x5B9E;&#x73B0;&#x529F;&#x80FD;&#x7684;</p>\n</li>\n<li><p>&#x597D;&#x7684;&#x4EE3;&#x7801;&#x662F;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x826F;&#x597D;&#x7684;&#x81EA;&#x6211;&#x63CF;&#x8FF0;&#x7684;&#xFF0C;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x592A;&#x591A;&#x7684;&#x6CE8;&#x91CA;&#xFF0C;&#x4E3A;&#x4E86;&#x4EE3;&#x7801;&#x66F4;&#x597D;&#x7684;&#x7EF4;&#x62A4;&#xFF0C;&#x5728;&#x65E0;&#x6CD5;&#x5199;&#x51FA;&#x4E00;&#x76EE;&#x4E86;&#x7136;&#x7684;&#x4EE3;&#x7801;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5FC5;&#x8981;&#x7684;&#x6CE8;&#x91CA;&#x662F;&#x4E0D;&#x80FD;&#x5C11;&#x7684;&#x3002;&#x5207;&#x52FF;&#x4E0D;&#x80FD;&#x4EE3;&#x7801;&#x903B;&#x8F91;&#x65E2;&#x590D;&#x6742;&#xFF0C;&#x8FD8;&#x6CA1;&#x6709;&#x76F8;&#x5E94;&#x7684;&#x6CE8;&#x91CA;&#x6216;&#x8005;&#x6587;&#x6863;&#x8BF4;&#x660E;&#x3002;</p>\n</li>\n<li><p>&#x6240;&#x6709;&#x7684;&#x8BBE;&#x8BA1;&#x6A21;&#x578B;&#x548C;&#x7406;&#x8BBA;&#x90FD;&#x53EA;&#x662F;&#x624B;&#x6BB5;&#xFF0C;&#x5176;&#x5B9E;&#x552F;&#x4E00;&#x7684;&#x76EE;&#x6807;&#x662F;&#x5728;&#x5C3D;&#x91CF;&#x63D0;&#x9AD8;&#xFF08;&#x53EF;&#x7EF4;&#x62A4;&#x6027;&#xFF0C;&#x53EF;&#x590D;&#x7528;&#x6027;=&#x53EF;&#x6D4B;&#x8BD5;&#x6027;&#xFF09;&#x7B49;&#x7B49;&#x7684;&#x6761;&#x4EF6;&#x4E0B;&#x5B9E;&#x73B0;&#x4E1A;&#x52A1;&#x9700;&#x6C42;&#x3002;&#x5207;&#x4E0D;&#x53EF;&#x5F62;&#x800C;&#x4E0A;&#x5B66;&#xFF0C;&#x8D70;&#x6559;&#x6761;&#x4E3B;&#x4E49;&#xFF0C;&#x4E00;&#x5473;&#x7684;&#x8FFD;&#x6C42;&#x56FA;&#x8BDD;&#x7684;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#x4ECE;&#x800C;&#x4F7F;&#x5F97;&#x4EE3;&#x7801;&#x590D;&#x6742;&#x96BE;&#x4EE5;&#x7406;&#x89E3;&#x548C;&#x6D4B;&#x8BD5;&#x3002;</p>\n<h5 id=\"&#x90A3;&#x4E48;&#x5982;&#x4F55;&#x5199;&#x51FA;&#x597D;&#x7684;&#x4EE3;&#x7801;&#xFF1F;\"><a href=\"#&#x90A3;&#x4E48;&#x5982;&#x4F55;&#x5199;&#x51FA;&#x597D;&#x7684;&#x4EE3;&#x7801;&#xFF1F;\" class=\"headerlink\" title=\"&#x90A3;&#x4E48;&#x5982;&#x4F55;&#x5199;&#x51FA;&#x597D;&#x7684;&#x4EE3;&#x7801;&#xFF1F;\"></a>&#x90A3;&#x4E48;&#x5982;&#x4F55;&#x5199;&#x51FA;&#x597D;&#x7684;&#x4EE3;&#x7801;&#xFF1F;</h5><ul>\n<li>code review  &#x91CD;&#x70B9;&#x4E0D;&#x662F;&#x673A;&#x5668;&#x53EF;&#x4EE5;&#x68C0;&#x67E5;&#x51FA;&#x6765;&#x7684;&#x4EE3;&#x7801;&#x9519;&#x8BEF;&#x6216;&#x8005;&#x4E00;&#x4E9B;&#x7EC6;&#x5FAE;&#x7684;&#x7F16;&#x5199;&#x4E60;&#x60EF;&#xFF0C;&#x91CD;&#x70B9;&#x662F;&#x4EE3;&#x7801;&#x7684;&#x8BBE;&#x8BA1;&#x601D;&#x8DEF;&#x548C;&#x6A21;&#x5757;&#x7684;&#x5212;&#x5206;&#x65B9;&#x6CD5;&#xFF0C;&#x5BF9;&#x4E8E;&#x5B9E;&#x9645;&#x60C5;&#x51B5;&#x4E2D;&#xFF0C;&#x5C0F;&#x56E2;&#x961F;&#x7684;&#x96C6;&#x4F53;&#x91CD;&#x6784;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x9009;&#x62E9;</li>\n<li>&#x4EE3;&#x7801;&#x91CD;&#x6784;</li>\n<li>&#x9605;&#x8BFB;&#x4F18;&#x79C0;&#x7684;&#x5F00;&#x6E90;&#x4EE3;&#x7801;&#xFF0C;&#x6216;&#x8005;&#x7EC4;&#x5185;&#x4F18;&#x79C0;&#x540C;&#x5B66;&#x5199;&#x51FA;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x9605;&#x8BFB;&#x81EA;&#x5DF1;&#x8EAB;&#x8FB9;&#x4EBA;&#x7684;&#x4EE3;&#x7801;&#x597D;&#x5904;&#x662F;&#x53EF;&#x4EE5;&#x95EE;&#x95EE;&#x4ED6;&#x4EEC;&#x4E3A;&#x4EC0;&#x4E48;&#x8FD9;&#x6837;&#x5199;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x90A3;&#x6837;&#x5199;&#xFF0C;&#x8FDB;&#x6B65;&#x4F1A;&#x5F88;&#x5FEB;&#x3002;</li>\n<li>&#x6700;&#x540E;&#x662F;&#x4F7F;&#x7528;&#x4E00;&#x4E9B;&#x9759;&#x6001;&#x4EE3;&#x7801;&#x68C0;&#x67E5;&#x7684;&#x5DE5;&#x5177;&#x8FDB;&#x884C;&#x4EE3;&#x7801;&#x68C0;&#x67E5;&#x3002;</li>\n</ul>\n<h5 id=\"&#x5E38;&#x7528;&#x7684;&#x4EE3;&#x7801;&#x6574;&#x6D01;&#x6280;&#x5DE7;&#xFF1A;\"><a href=\"#&#x5E38;&#x7528;&#x7684;&#x4EE3;&#x7801;&#x6574;&#x6D01;&#x6280;&#x5DE7;&#xFF1A;\" class=\"headerlink\" title=\"&#x5E38;&#x7528;&#x7684;&#x4EE3;&#x7801;&#x6574;&#x6D01;&#x6280;&#x5DE7;&#xFF1A;\"></a>&#x5E38;&#x7528;&#x7684;&#x4EE3;&#x7801;&#x6574;&#x6D01;&#x6280;&#x5DE7;&#xFF1A;</h5><ul>\n<li>&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x4E1C;&#x897F;&#xFF08;class method var&#xFF09;&#x90FD;&#x5E94;&#x8BE5;&#x660E;&#x786E;&#x7684;&#x8D1F;&#x8D23;&#x67D0;&#x4E2A;&#x5355;&#x4E00;&#x6982;&#x5FF5;&#x7684;&#x4E8B;&#x60C5;&#x3002;</li>\n<li>&#x5728;&#x7F16;&#x5199;&#x4E00;&#x4E2A;&#x529F;&#x80FD;&#x70B9;&#x4E4B;&#x524D;&#xFF0C;&#x5BF9;&#x5176;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x4E00;&#x4E2A;&#x5927;&#x4F53;&#x7684;&#x8BBE;&#x8BA1;&#xFF08;&#x5982;&#x679C;&#x662F;&#x5F3A;&#x6570;&#x636E;&#x76F8;&#x5173;&#x7684;&#x8BDD;&#xFF0C;&#x5728;&#x8111;&#x6D77;&#x4E2D;&#x628A;&#x6570;&#x636E;&#x6D41;&#x4E32;&#x8D77;&#x6765;&#xFF0C;&#x5FC5;&#x8981;&#x7684;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x72B6;&#x6001;&#x673A;&#x7684;&#x6982;&#x5FF5;&#x8DDF;&#x8E2A;APP&#x7684;&#x53D8;&#x5316;&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5B8C;&#x6210;&#x7EC6;&#x8282;&#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#x3002;</li>\n<li>&#x7C7B;&#xFF0C;&#x65B9;&#x6CD5;&#xFF0C;&#x53D8;&#x91CF;&#xFF0C;&#x540D;&#x79F0;&#x7684;&#x8BBE;&#x8BA1;&#xFF0C;&#x51FD;&#x6570;&#x548C;&#x65B9;&#x6CD5;&#x53C2;&#x6570;&#x7684;&#x8BBE;&#x8BA1;&#xFF0C;&#x76EE;&#x7684;&#x662F;&#x5C3D;&#x91CF;&#x9760;&#x8FD1;&#x8BA9;&#x4EBA;&#x4E00;&#x76EE;&#x4E86;&#x7136;&#x7684;&#x6548;&#x679C;</li>\n<li>&#x5BF9;&#x4E8E;&#x4EFB;&#x4F55;&#x7684;&#x65B9;&#x6CD5;&#x548C;&#x7C7B;&#xFF0C;&#x65E0;&#x8BBA;&#x662F;UI&#x76F8;&#x5173;&#x8FD8;&#x662F;&#x7F51;&#x7EDC;&#x76F8;&#x5173;&#x8FD8;&#x662F;&#x903B;&#x8F91;&#x76F8;&#x5173;&#x6216;&#x8005;&#x662F;&#x6570;&#x636E;&#x5904;&#x7406;&#x76F8;&#x5173;&#xFF0C;&#x90FD;&#x5FC5;&#x987B;&#x51C6;&#x786E;&#x7684;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x5F52;&#x5C5E;&#xFF0C;&#x5E76;&#x4E14;&#x8FD9;&#x4E2A;&#x5F52;&#x5C5E;&#x662F;&#x5E08;&#x51FA;&#x6709;&#x540D;&#x7684;&#x3002;&#x8FD9;&#x5C31;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x826F;&#x597D;&#x7684;&#x6982;&#x5FF5;&#x5B9A;&#x4E49;&#x548C;&#x8BBE;&#x8BA1;&#xFF0C;&#xFF08;&#x5177;&#x4F53;&#x5C31;&#x662F;&#x6307;&#xFF0C;&#x8FD9;&#x4E9B;&#x4E8B;&#x60C5;&#x600E;&#x4E48;&#x5206;&#x5757;&#xFF0C;&#x653E;&#x5728;&#x54EA;&#xFF0C;&#x4E4B;&#x95F4;&#x600E;&#x4E48;&#x4F9D;&#x8D56;&#xFF09;</li>\n<li>&#x5BF9;&#x590D;&#x6742;&#x7EE7;&#x627F;&#x7684;&#x4F7F;&#x7528;&#x4FDD;&#x6301;&#x614E;&#x72EC;&#x7684;&#x6001;&#x5EA6;&#xFF0C;&#x5982;&#x679C;&#x5957;&#x4E1C;&#x897F;&#x4F7F;&#x7528;&#x590D;&#x6742;&#x7EE7;&#x627F;&#x5173;&#x7CFB;&#x5E76;&#x4E0D;&#x662F;&#x5FC5;&#x8981;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#x5C3D;&#x91CF;&#x4E0D;&#x8981;&#x4F7F;&#x7528;&#x3002;</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"什么样代码是好的？对于编写代码，人们常常会出现哪些误区？\"><a href=\"#什么样代码是好的？对于编写代码，人们常常会出现哪些误区？\" class=\"headerlink\" title=\"什么样代码是好的？对于编写代码，人们常常会出现哪些误区？\"></a>什么样代码是好的？对于编写代码，人们常常会出现哪些误区？</h5><ul>\n<li><p>代码是更多时间是用来维护的，其次才是实现功能的</p>\n</li>\n<li><p>好的代码是可以进行良好的自我描述的，并不需要太多的注释，为了代码更好的维护，在无法写出一目了然的代码的时候，必要的注释是不能少的。切勿不能代码逻辑既复杂，还没有相应的注释或者文档说明。</p>\n</li>\n<li><p>所有的设计模型和理论都只是手段，其实唯一的目标是在尽量提高（可维护性，可复用性=可测试性）等等的条件下实现业务需求。切不可形而上学，走教条主义，一味的追求固话的设计模式从而使得代码复杂难以理解和测试。</p>\n<h5 id=\"那么如何写出好的代码？\"><a href=\"#那么如何写出好的代码？\" class=\"headerlink\" title=\"那么如何写出好的代码？\"></a>那么如何写出好的代码？</h5><ul>\n<li>code review  重点不是机器可以检查出来的代码错误或者一些细微的编写习惯，重点是代码的设计思路和模块的划分方法，对于实际情况中，小团队的集体重构是一个很好的选择</li>\n<li>代码重构</li>\n<li>阅读优秀的开源代码，或者组内优秀同学写出的代码，阅读自己身边人的代码好处是可以问问他们为什么这样写，为什么那样写，进步会很快。</li>\n<li>最后是使用一些静态代码检查的工具进行代码检查。</li>\n</ul>\n<h5 id=\"常用的代码整洁技巧：\"><a href=\"#常用的代码整洁技巧：\" class=\"headerlink\" title=\"常用的代码整洁技巧：\"></a>常用的代码整洁技巧：</h5><ul>\n<li>任何一个东西（class method var）都应该明确的负责某个单一概念的事情。</li>\n<li>在编写一个功能点之前，对其实现方式进行一个大体的设计（如果是强数据相关的话，在脑海中把数据流串起来，必要的时候可以使用状态机的概念跟踪APP的变化），然后再完成细节实现代码。</li>\n<li>类，方法，变量，名称的设计，函数和方法参数的设计，目的是尽量靠近让人一目了然的效果</li>\n<li>对于任何的方法和类，无论是UI相关还是网络相关还是逻辑相关或者是数据处理相关，都必须准确的找到一个类的归属，并且这个归属是师出有名的。这就需要一个良好的概念定义和设计，（具体就是指，这些事情怎么分块，放在哪，之间怎么依赖）</li>\n<li>对复杂继承的使用保持慎独的态度，如果套东西使用复杂继承关系并不是必要的，那么尽量不要使用。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"保证用户拿到的内容没有被篡改的验证方法","_content":"用户拿到的内容没有被篡改的验证：\n\n1.服务器生成公私钥\n\n2.服务器公布公钥\n\n3.服务器对即将发布的数据进行MD5，使用私钥对MD5后生成的字符串进行加密，生成的东西称之为签名\n\n4.服务器把这个签名和本来要发的数据一起发给用户\n\n5.用户收到所有数据后，用公钥解密签名，得到MD5字符串，\n\n6.用户再对原始数据进行MD5，然后两个MD5字符串比对以验证原始数据在发送的过程中是否有没有被篡改过","source":"_posts/保证用户拿到的内容没有被篡改的验证方法.md","raw":"---\ntitle: 保证用户拿到的内容没有被篡改的验证方法\n---\n用户拿到的内容没有被篡改的验证：\n\n1.服务器生成公私钥\n\n2.服务器公布公钥\n\n3.服务器对即将发布的数据进行MD5，使用私钥对MD5后生成的字符串进行加密，生成的东西称之为签名\n\n4.服务器把这个签名和本来要发的数据一起发给用户\n\n5.用户收到所有数据后，用公钥解密签名，得到MD5字符串，\n\n6.用户再对原始数据进行MD5，然后两个MD5字符串比对以验证原始数据在发送的过程中是否有没有被篡改过","slug":"保证用户拿到的内容没有被篡改的验证方法","published":1,"date":"2017-08-28T11:10:39.000Z","updated":"2017-09-14T11:35:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaag2mrn0003hgodie0rex96","content":"<p>&#x7528;&#x6237;&#x62FF;&#x5230;&#x7684;&#x5185;&#x5BB9;&#x6CA1;&#x6709;&#x88AB;&#x7BE1;&#x6539;&#x7684;&#x9A8C;&#x8BC1;&#xFF1A;</p>\n<p>1.&#x670D;&#x52A1;&#x5668;&#x751F;&#x6210;&#x516C;&#x79C1;&#x94A5;</p>\n<p>2.&#x670D;&#x52A1;&#x5668;&#x516C;&#x5E03;&#x516C;&#x94A5;</p>\n<p>3.&#x670D;&#x52A1;&#x5668;&#x5BF9;&#x5373;&#x5C06;&#x53D1;&#x5E03;&#x7684;&#x6570;&#x636E;&#x8FDB;&#x884C;MD5&#xFF0C;&#x4F7F;&#x7528;&#x79C1;&#x94A5;&#x5BF9;MD5&#x540E;&#x751F;&#x6210;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x8FDB;&#x884C;&#x52A0;&#x5BC6;&#xFF0C;&#x751F;&#x6210;&#x7684;&#x4E1C;&#x897F;&#x79F0;&#x4E4B;&#x4E3A;&#x7B7E;&#x540D;</p>\n<p>4.&#x670D;&#x52A1;&#x5668;&#x628A;&#x8FD9;&#x4E2A;&#x7B7E;&#x540D;&#x548C;&#x672C;&#x6765;&#x8981;&#x53D1;&#x7684;&#x6570;&#x636E;&#x4E00;&#x8D77;&#x53D1;&#x7ED9;&#x7528;&#x6237;</p>\n<p>5.&#x7528;&#x6237;&#x6536;&#x5230;&#x6240;&#x6709;&#x6570;&#x636E;&#x540E;&#xFF0C;&#x7528;&#x516C;&#x94A5;&#x89E3;&#x5BC6;&#x7B7E;&#x540D;&#xFF0C;&#x5F97;&#x5230;MD5&#x5B57;&#x7B26;&#x4E32;&#xFF0C;</p>\n<p>6.&#x7528;&#x6237;&#x518D;&#x5BF9;&#x539F;&#x59CB;&#x6570;&#x636E;&#x8FDB;&#x884C;MD5&#xFF0C;&#x7136;&#x540E;&#x4E24;&#x4E2A;MD5&#x5B57;&#x7B26;&#x4E32;&#x6BD4;&#x5BF9;&#x4EE5;&#x9A8C;&#x8BC1;&#x539F;&#x59CB;&#x6570;&#x636E;&#x5728;&#x53D1;&#x9001;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x662F;&#x5426;&#x6709;&#x6CA1;&#x6709;&#x88AB;&#x7BE1;&#x6539;&#x8FC7;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>用户拿到的内容没有被篡改的验证：</p>\n<p>1.服务器生成公私钥</p>\n<p>2.服务器公布公钥</p>\n<p>3.服务器对即将发布的数据进行MD5，使用私钥对MD5后生成的字符串进行加密，生成的东西称之为签名</p>\n<p>4.服务器把这个签名和本来要发的数据一起发给用户</p>\n<p>5.用户收到所有数据后，用公钥解密签名，得到MD5字符串，</p>\n<p>6.用户再对原始数据进行MD5，然后两个MD5字符串比对以验证原始数据在发送的过程中是否有没有被篡改过</p>\n"},{"title":"同一台电脑配置多个SSHKey","date":"2017-09-18T08:36:45.000Z","_content":"\n##### 同一台电脑配置多个SSHKey\n\n公司有自己的GitLab，但是我平时也喜欢给GitHub上放点东西，包括这个博客就是在GitHub托管的。因为在部署博客的时候只能使用SSH，所以就需要在公司电脑上配置两个SSHKey，那么到底我们在使用SHH的时候，它用的是哪个Key呢。在经过学习后发现SSH有一个config文件可以配置。\n\n```\n# GitHub的配置信息\nHost github.com\nHostName ssh.github.com\nPort 443\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/github_rsa  //对应为GitHub生成的KEY\n\n\n# 自己公司的配置信息\nHost 公司Git的host\nHostName 公司Git的hostname\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa //对应为公司Git生成的KEY\n```\n\n用上面内容创建一个名为config的文件，放入~/.ssh目录里面即可。\n\n下面是我的~/.ssh目录里面的东西\n\n```\nconfig\t\tgithub_rsa.pub\tid_rsa.pub\ngithub_rsa\tid_rsa\t\tknown_hosts\n```\n\n##### 写一个切换Git用户名邮箱信息的小脚本\n\n有这么一个需求，就是我经常会在公司Git和GitHub切换提交东西，我希望我能快速切换Git账号信息和邮箱信息，所以就写了一个shell小脚本。\n\n```shell\n#!/bin/bash\nif [[ $1 == \"g\" ]]; then\n\t#statements\n\tgit config --global user.email allenwooop@gmail.com\n    git config --global user.name Woooop\n\techo \"设置Git邮箱为allenwooop@gmail.com\"\nfi\nif [[ $1 == \"p\" ]]; then\n\t#statements\n\tgit config --global user.email 私有邮箱\n    git config --global user.name 私有name\n\techo \"设置Git邮箱为xxxx@mail.com\"\nfi\n```\n\n使用方法：自己创建一个.sh的文件，把代码粘贴进去，填写自己对应的信息。\n\n切换为GitHub邮箱环境\n\n```\n./文件名.sh g //g是参数，代表GitHub\n```\n\n切换为私有邮箱环境\n\n```\n./文件名.sh p //p是参数，代表私有环境Private\n```\n\n","source":"_posts/同一台电脑配置多个SSHKey.md","raw":"---\ntitle: 同一台电脑配置多个SSHKey\ndate: 2017-09-18 16:36:45\ntags:\n---\n\n##### 同一台电脑配置多个SSHKey\n\n公司有自己的GitLab，但是我平时也喜欢给GitHub上放点东西，包括这个博客就是在GitHub托管的。因为在部署博客的时候只能使用SSH，所以就需要在公司电脑上配置两个SSHKey，那么到底我们在使用SHH的时候，它用的是哪个Key呢。在经过学习后发现SSH有一个config文件可以配置。\n\n```\n# GitHub的配置信息\nHost github.com\nHostName ssh.github.com\nPort 443\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/github_rsa  //对应为GitHub生成的KEY\n\n\n# 自己公司的配置信息\nHost 公司Git的host\nHostName 公司Git的hostname\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa //对应为公司Git生成的KEY\n```\n\n用上面内容创建一个名为config的文件，放入~/.ssh目录里面即可。\n\n下面是我的~/.ssh目录里面的东西\n\n```\nconfig\t\tgithub_rsa.pub\tid_rsa.pub\ngithub_rsa\tid_rsa\t\tknown_hosts\n```\n\n##### 写一个切换Git用户名邮箱信息的小脚本\n\n有这么一个需求，就是我经常会在公司Git和GitHub切换提交东西，我希望我能快速切换Git账号信息和邮箱信息，所以就写了一个shell小脚本。\n\n```shell\n#!/bin/bash\nif [[ $1 == \"g\" ]]; then\n\t#statements\n\tgit config --global user.email allenwooop@gmail.com\n    git config --global user.name Woooop\n\techo \"设置Git邮箱为allenwooop@gmail.com\"\nfi\nif [[ $1 == \"p\" ]]; then\n\t#statements\n\tgit config --global user.email 私有邮箱\n    git config --global user.name 私有name\n\techo \"设置Git邮箱为xxxx@mail.com\"\nfi\n```\n\n使用方法：自己创建一个.sh的文件，把代码粘贴进去，填写自己对应的信息。\n\n切换为GitHub邮箱环境\n\n```\n./文件名.sh g //g是参数，代表GitHub\n```\n\n切换为私有邮箱环境\n\n```\n./文件名.sh p //p是参数，代表私有环境Private\n```\n\n","slug":"同一台电脑配置多个SSHKey","published":1,"updated":"2017-09-18T08:37:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaag2mro0004hgods5tnmx3y","content":"<h5 id=\"&#x540C;&#x4E00;&#x53F0;&#x7535;&#x8111;&#x914D;&#x7F6E;&#x591A;&#x4E2A;SSHKey\"><a href=\"#&#x540C;&#x4E00;&#x53F0;&#x7535;&#x8111;&#x914D;&#x7F6E;&#x591A;&#x4E2A;SSHKey\" class=\"headerlink\" title=\"&#x540C;&#x4E00;&#x53F0;&#x7535;&#x8111;&#x914D;&#x7F6E;&#x591A;&#x4E2A;SSHKey\"></a>&#x540C;&#x4E00;&#x53F0;&#x7535;&#x8111;&#x914D;&#x7F6E;&#x591A;&#x4E2A;SSHKey</h5><p>&#x516C;&#x53F8;&#x6709;&#x81EA;&#x5DF1;&#x7684;GitLab&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x5E73;&#x65F6;&#x4E5F;&#x559C;&#x6B22;&#x7ED9;GitHub&#x4E0A;&#x653E;&#x70B9;&#x4E1C;&#x897F;&#xFF0C;&#x5305;&#x62EC;&#x8FD9;&#x4E2A;&#x535A;&#x5BA2;&#x5C31;&#x662F;&#x5728;GitHub&#x6258;&#x7BA1;&#x7684;&#x3002;&#x56E0;&#x4E3A;&#x5728;&#x90E8;&#x7F72;&#x535A;&#x5BA2;&#x7684;&#x65F6;&#x5019;&#x53EA;&#x80FD;&#x4F7F;&#x7528;SSH&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x9700;&#x8981;&#x5728;&#x516C;&#x53F8;&#x7535;&#x8111;&#x4E0A;&#x914D;&#x7F6E;&#x4E24;&#x4E2A;SSHKey&#xFF0C;&#x90A3;&#x4E48;&#x5230;&#x5E95;&#x6211;&#x4EEC;&#x5728;&#x4F7F;&#x7528;SHH&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5B83;&#x7528;&#x7684;&#x662F;&#x54EA;&#x4E2A;Key&#x5462;&#x3002;&#x5728;&#x7ECF;&#x8FC7;&#x5B66;&#x4E60;&#x540E;&#x53D1;&#x73B0;SSH&#x6709;&#x4E00;&#x4E2A;config&#x6587;&#x4EF6;&#x53EF;&#x4EE5;&#x914D;&#x7F6E;&#x3002;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"># GitHub&#x7684;&#x914D;&#x7F6E;&#x4FE1;&#x606F;</div><div class=\"line\">Host github.com</div><div class=\"line\">HostName ssh.github.com</div><div class=\"line\">Port 443</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/github_rsa  //&#x5BF9;&#x5E94;&#x4E3A;GitHub&#x751F;&#x6210;&#x7684;KEY</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># &#x81EA;&#x5DF1;&#x516C;&#x53F8;&#x7684;&#x914D;&#x7F6E;&#x4FE1;&#x606F;</div><div class=\"line\">Host &#x516C;&#x53F8;Git&#x7684;host</div><div class=\"line\">HostName &#x516C;&#x53F8;Git&#x7684;hostname</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa //&#x5BF9;&#x5E94;&#x4E3A;&#x516C;&#x53F8;Git&#x751F;&#x6210;&#x7684;KEY</div></pre></td></tr></table></figure>\n<p>&#x7528;&#x4E0A;&#x9762;&#x5185;&#x5BB9;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x540D;&#x4E3A;config&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x653E;&#x5165;~/.ssh&#x76EE;&#x5F55;&#x91CC;&#x9762;&#x5373;&#x53EF;&#x3002;</p>\n<p>&#x4E0B;&#x9762;&#x662F;&#x6211;&#x7684;~/.ssh&#x76EE;&#x5F55;&#x91CC;&#x9762;&#x7684;&#x4E1C;&#x897F;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">config\t\tgithub_rsa.pub\tid_rsa.pub</div><div class=\"line\">github_rsa\tid_rsa\t\tknown_hosts</div></pre></td></tr></table></figure>\n<h5 id=\"&#x5199;&#x4E00;&#x4E2A;&#x5207;&#x6362;Git&#x7528;&#x6237;&#x540D;&#x90AE;&#x7BB1;&#x4FE1;&#x606F;&#x7684;&#x5C0F;&#x811A;&#x672C;\"><a href=\"#&#x5199;&#x4E00;&#x4E2A;&#x5207;&#x6362;Git&#x7528;&#x6237;&#x540D;&#x90AE;&#x7BB1;&#x4FE1;&#x606F;&#x7684;&#x5C0F;&#x811A;&#x672C;\" class=\"headerlink\" title=\"&#x5199;&#x4E00;&#x4E2A;&#x5207;&#x6362;Git&#x7528;&#x6237;&#x540D;&#x90AE;&#x7BB1;&#x4FE1;&#x606F;&#x7684;&#x5C0F;&#x811A;&#x672C;\"></a>&#x5199;&#x4E00;&#x4E2A;&#x5207;&#x6362;Git&#x7528;&#x6237;&#x540D;&#x90AE;&#x7BB1;&#x4FE1;&#x606F;&#x7684;&#x5C0F;&#x811A;&#x672C;</h5><p>&#x6709;&#x8FD9;&#x4E48;&#x4E00;&#x4E2A;&#x9700;&#x6C42;&#xFF0C;&#x5C31;&#x662F;&#x6211;&#x7ECF;&#x5E38;&#x4F1A;&#x5728;&#x516C;&#x53F8;Git&#x548C;GitHub&#x5207;&#x6362;&#x63D0;&#x4EA4;&#x4E1C;&#x897F;&#xFF0C;&#x6211;&#x5E0C;&#x671B;&#x6211;&#x80FD;&#x5FEB;&#x901F;&#x5207;&#x6362;Git&#x8D26;&#x53F7;&#x4FE1;&#x606F;&#x548C;&#x90AE;&#x7BB1;&#x4FE1;&#x606F;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x5199;&#x4E86;&#x4E00;&#x4E2A;shell&#x5C0F;&#x811A;&#x672C;&#x3002;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span>!/bin/bash</div><div class=\"line\">if [[ $1 == &quot;g&quot; ]]; then</div><div class=\"line\"><span class=\"meta\">\t#</span>statements</div><div class=\"line\">\tgit config --global user.email allenwooop@gmail.com</div><div class=\"line\">    git config --global user.name Woooop</div><div class=\"line\">\techo &quot;&#x8BBE;&#x7F6E;Git&#x90AE;&#x7BB1;&#x4E3A;allenwooop@gmail.com&quot;</div><div class=\"line\">fi</div><div class=\"line\">if [[ $1 == &quot;p&quot; ]]; then</div><div class=\"line\"><span class=\"meta\">\t#</span>statements</div><div class=\"line\">\tgit config --global user.email &#x79C1;&#x6709;&#x90AE;&#x7BB1;</div><div class=\"line\">    git config --global user.name &#x79C1;&#x6709;name</div><div class=\"line\">\techo &quot;&#x8BBE;&#x7F6E;Git&#x90AE;&#x7BB1;&#x4E3A;xxxx@mail.com&quot;</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>&#x4F7F;&#x7528;&#x65B9;&#x6CD5;&#xFF1A;&#x81EA;&#x5DF1;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;.sh&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x628A;&#x4EE3;&#x7801;&#x7C98;&#x8D34;&#x8FDB;&#x53BB;&#xFF0C;&#x586B;&#x5199;&#x81EA;&#x5DF1;&#x5BF9;&#x5E94;&#x7684;&#x4FE1;&#x606F;&#x3002;</p>\n<p>&#x5207;&#x6362;&#x4E3A;GitHub&#x90AE;&#x7BB1;&#x73AF;&#x5883;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./&#x6587;&#x4EF6;&#x540D;.sh g //g&#x662F;&#x53C2;&#x6570;&#xFF0C;&#x4EE3;&#x8868;GitHub</div></pre></td></tr></table></figure>\n<p>&#x5207;&#x6362;&#x4E3A;&#x79C1;&#x6709;&#x90AE;&#x7BB1;&#x73AF;&#x5883;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./&#x6587;&#x4EF6;&#x540D;.sh p //p&#x662F;&#x53C2;&#x6570;&#xFF0C;&#x4EE3;&#x8868;&#x79C1;&#x6709;&#x73AF;&#x5883;Private</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"同一台电脑配置多个SSHKey\"><a href=\"#同一台电脑配置多个SSHKey\" class=\"headerlink\" title=\"同一台电脑配置多个SSHKey\"></a>同一台电脑配置多个SSHKey</h5><p>公司有自己的GitLab，但是我平时也喜欢给GitHub上放点东西，包括这个博客就是在GitHub托管的。因为在部署博客的时候只能使用SSH，所以就需要在公司电脑上配置两个SSHKey，那么到底我们在使用SHH的时候，它用的是哪个Key呢。在经过学习后发现SSH有一个config文件可以配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"># GitHub的配置信息</div><div class=\"line\">Host github.com</div><div class=\"line\">HostName ssh.github.com</div><div class=\"line\">Port 443</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/github_rsa  //对应为GitHub生成的KEY</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 自己公司的配置信息</div><div class=\"line\">Host 公司Git的host</div><div class=\"line\">HostName 公司Git的hostname</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa //对应为公司Git生成的KEY</div></pre></td></tr></table></figure>\n<p>用上面内容创建一个名为config的文件，放入~/.ssh目录里面即可。</p>\n<p>下面是我的~/.ssh目录里面的东西</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">config\t\tgithub_rsa.pub\tid_rsa.pub</div><div class=\"line\">github_rsa\tid_rsa\t\tknown_hosts</div></pre></td></tr></table></figure>\n<h5 id=\"写一个切换Git用户名邮箱信息的小脚本\"><a href=\"#写一个切换Git用户名邮箱信息的小脚本\" class=\"headerlink\" title=\"写一个切换Git用户名邮箱信息的小脚本\"></a>写一个切换Git用户名邮箱信息的小脚本</h5><p>有这么一个需求，就是我经常会在公司Git和GitHub切换提交东西，我希望我能快速切换Git账号信息和邮箱信息，所以就写了一个shell小脚本。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span>!/bin/bash</div><div class=\"line\">if [[ $1 == \"g\" ]]; then</div><div class=\"line\"><span class=\"meta\">\t#</span>statements</div><div class=\"line\">\tgit config --global user.email allenwooop@gmail.com</div><div class=\"line\">    git config --global user.name Woooop</div><div class=\"line\">\techo \"设置Git邮箱为allenwooop@gmail.com\"</div><div class=\"line\">fi</div><div class=\"line\">if [[ $1 == \"p\" ]]; then</div><div class=\"line\"><span class=\"meta\">\t#</span>statements</div><div class=\"line\">\tgit config --global user.email 私有邮箱</div><div class=\"line\">    git config --global user.name 私有name</div><div class=\"line\">\techo \"设置Git邮箱为xxxx@mail.com\"</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>使用方法：自己创建一个.sh的文件，把代码粘贴进去，填写自己对应的信息。</p>\n<p>切换为GitHub邮箱环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./文件名.sh g //g是参数，代表GitHub</div></pre></td></tr></table></figure>\n<p>切换为私有邮箱环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./文件名.sh p //p是参数，代表私有环境Private</div></pre></td></tr></table></figure>\n"},{"title":"重读SDWebImage","date":"2017-09-18T01:51:53.000Z","_content":"\n#### 重读SDWebImage\n\n很早以前刚接触iOS开发的时候就知道SDWebImage的强大和流行，在大部分的iOS项目中都可以看到她的身影，也是相当经典的第三方库，非常值得阅读，只是一直以来都只是大致了解其运行的流程，并没有深入阅读源码，其中的许多设计和细节都非常值得学习，所以让我们再次去一探究竟。\n\n首先我们从一张时序图来了解SDWebImage最主要的工作流程。![](SDWebImageSequenceDiagram.png)\n\n其工作流程可以分为下列的步骤：\n\n1. 控件调用setImageWithURL接口\n2. 追溯到UIView的loadImageWithURL方法\n3. 在SDWebImageManager中首先通过queryDiskCacheForKey方法寻找所请求的图片是否在沙盒中缓存\n4. 如果有，则直接返回Image，否则通过downloadImage方法使用另外一个类SDWebImageDownloader下载图片，返回结果后，通过storeImage缓存图片，而后再返回Image\n5. 把Image数据set到相应的控件上\n\n了解了基本流程后，我们再看看具体的类结构。![](SDWebImageClassDiagram.png)\n\n初看起来是比较复杂的一张类图，但仔细看看后可以发现其实他们之间的关系是比较清晰的。\n\n- 首先我们从左上角开始看起，对UIButton、UIImageView等控件添加分类方法作为下载图片的入口，所有的方法最终走他们父类UIview的方法sd_internalSetImage\n- SDWebImageManager 作为连接所有类的核心，在sd_internalSetImage方法中通过调用loadImageWithURL进入。\n- SDWebImageCombinedOperation 描述的是一个在Manager层面的下载操作，里面包含了取消block还有真正的下载操作Operation。\n- SDWebImageManagerDelegate 提供一些代理方法给外部使用\n- SDImageCache 看其名字就知道是提供缓存功能的\n- SDImageCacheConfig 配置缓存设置信息的属性及方法\n- SDWebImageDownloader 看其名字也知道是用来下载图片的\n- SDWebImageDownloaderOperation 一个真正的下载任务\n- SDWebImageDownloadToken 用来描述一个下载任务的特征\n- SDWebImageDownloaderOperationInterface 如果想要自定义一个下载任务的话，必须遵守的协议\n- SDWebImagePrefetcher 用来预下载图片的，可以下载完先不使用\n\n这么多类中，其实支撑SDWebImage运作的最主要的三个部分，他们分别是：SDWebImageManager、SDImageCache、SDWebImageDownloader下面我们逐一对其进行细细分析，看看他们到底是怎么工作的。\n\n##### SDWebImageManager\n\n如果我们查看SDWebImageManager.m的源码，会发现其中近一半多的篇幅都被单独一个方法占据了，他就是之前我们提过的：\n\n```objc\n- (id <SDWebImageOperation>)loadImageWithURL:(nullable NSURL *)url options:(SDWebImageOptions)options progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock completed:(nullable SDInternalCompletionBlock)completedBlock;\n```\n\n很明显这个方法中的内容是SDWebImageManager中最核心的工作流程，下面我们逐一梳理其中的逻辑。\n\n1. 检查URL的合法性\n\n2. 检查URL是否曾经失败过\n\n3. 结合上面的信息，选择是否提前回调。\n\n   ```objc\n   [self callCompletionBlockForOperation:operation completion:completedBlock error:[NSError errorWithDomain:NSURLErrorDomain code:NSURLErrorFileDoesNotExist userInfo:nil] url:url];\n   ```\n\n4. 根据URL获取CacheKey，通过CacheKey去本地寻找图片，现在内存中找，如果内存中没有就去沙盒中找，这里使用了GCD异步函数，专门在一个IO线程里做沙盒存取的操作。\n\n   ```objc\n   - (nullable NSOperation *)queryCacheOperationForKey:(nullable NSString *)key done:(nullable SDCacheQueryCompletedBlock)doneBlock {\n       // First check the in-memory cache...\n       UIImage *image = [self imageFromMemoryCacheForKey:key];\n       if (image) {\n           NSData *diskData = nil;\n           if ([image isGIF]) {\n               diskData = [self diskImageDataBySearchingAllPathsForKey:key];\n           }\n           if (doneBlock) {\n               doneBlock(image, diskData, SDImageCacheTypeMemory);\n           }\n           return nil;\n       }\n\n       NSOperation *operation = [NSOperation new];\n       dispatch_async(self.ioQueue, ^{\n           if (operation.isCancelled) {\n               // do not call the completion if cancelled\n               return;\n           }\n           @autoreleasepool {\n               NSData *diskData = [self diskImageDataBySearchingAllPathsForKey:key];\n               UIImage *diskImage = [self diskImageForKey:key];\n               if (diskImage && self.config.shouldCacheImagesInMemory) {\n                   NSUInteger cost = SDCacheCostForImage(diskImage);\n                   [self.memCache setObject:diskImage forKey:key cost:cost];\n               }\n\n               if (doneBlock) {\n                   dispatch_async(dispatch_get_main_queue(), ^{\n                       doneBlock(diskImage, diskData, SDImageCacheTypeDisk);\n                   });\n               }\n           }\n       });\n   ```\n\n5. 如果缓存中有，则回调，没有的话则去网络下载\n\n    这里有个值得一说的点就是作者通过位移运算符做SDWebImageDownloaderOptions的枚举值，通过对枚举值进行或运算可以通过一个值描述多个枚举。\n\n     ```objc\n     SDWebImageDownloaderLowPriority = 1 << 0 //00000001\n     SDWebImageDownloaderProgressiveDownload = 1 << 1 //00000010\n     SDWebImageDownloaderUseNSURLCache = 1 << 2 //00000100\n     options =  SDWebImageDownloaderLowPriority || SDWebImageDownloaderProgressiveDownload || SDWebImageDownloaderUseNSURLCache\n     options = 00000111\n     ```\n\n    设置好配置信息后去网络下载\n\n6. 如果下载成功后就把图片cache起来，然后回调\n\n   ```objc\n    if (downloadedImage && finished) {\n   \t[self.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:nil];}\n   [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:downloadedImage data:downloadedData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url];\n   ```\n\n以上就是SDWebImageManager的主要功能和流程，在这其中包含了对imageCache和imageDownloader的调用，下面我们就先说一说imageCache。\n\n##### SDImageCache\n\n其实SDImageCache的功能很简单，就是对图片的缓存，缓存有两个地方，一个是内存memory，另外一个是沙盒disk。SDImageCache分别提供了对这两个地方进行图片的存、取、删的功能。我们就通过逐一介绍这些方法作为切入点对SDImageCache进行分析。\n\n- 存储Store\n\n  ```objc\n  - (void)storeImage:(nullable UIImage *)image\n           imageData:(nullable NSData *)imageData\n              forKey:(nullable NSString *)key\n              toDisk:(BOOL)toDisk\n          completion:(nullable SDWebImageNoParamsBlock)completionBlock;\n  ```\n\n  这些参数都很好理解，如果cacheconfig中设置了缓存在内存中，则先回把数据缓存进内存，然后再缓存至disk沙盒中。[self checkIfQueueIsIOQueue]检查当前queue是不是IOqueue。然后再把数据写入对应的路径中。\n\n- 取Query\n\n  ```objc\n  - (nullable NSOperation *)queryCacheOperationForKey:(nullable NSString *)key done:(nullable SDCacheQueryCompletedBlock)doneBlock;\n  ```\n\n  最主要的方法就是这个，其中先去内存中寻找，如果没有命中，则异步去disk中再找，如果找到的话，则把当前图片缓存在内存里方便下一次寻找的的同时，返回图片。\n\n- 删除Remove\n\n  ```objc\n  - (void)removeImageForKey:(nullable NSString *)key fromDisk:(BOOL)fromDisk withCompletion:(nullable SDWebImageNoParamsBlock)completion\n  ```\n\n  删除逻辑就比较简单了，如果是cacheconfig是shouldCacheImagesInMemory的话，先删除内存中的，再异步删除disk中的数据，然后跳回主线程执行回调。\n\n##### SDWebImageDownloader\n\n在SDWebImage中另一个非常重要的部分就是下载器SDWebImageDownloader了，总体其使用了NSURLSession和NSOperation进行设计和实现。下面这个方法就是整个下载器最主要的了。\n\n```objc\n- (nullable SDWebImageDownloadToken *)downloadImageWithURL:(nullable NSURL *)url options:(SDWebImageDownloaderOptions)options progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock completed:(nullable SDWebImageDownloaderCompletedBlock)completedBlock;\n```\n\n这个方法首先会转入一个新的方法addProgressCallback，并且直接返回其的返回值。在addProgressCallback中会根据URL去URLOperations里面寻找是否有对应的Operation,没有的话，则把createCallback赋值给Operation。\n\n```objc\noperation = createCallback();\n```\n\n并且加入到数组URLOperations中保存。在URLOperations的完成回调函数里写，在Operation执行完毕后，从URLOperations中删除。\n\n```objc\nid downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];\ntoken = [SDWebImageDownloadToken new];\ntoken.url = url;\ntoken.downloadOperationCancelToken = downloadOperationCancelToken;\n```\n\n通过addHandlersForProgress方法，把过程回调progressBlock和完成回调completedBlock封装在一个downloadOperationCancelToken里面，并且在callbackBlocks中保存。然后再生成一个SDWebImageDownloadToken，分别包含URL和Token信息。最终返回Token\n\n那么到这里，让我们看看前面createCallback()中到底做了什么？\n\n在createCallback()中，我们根据options设置了request的缓存策略\n\n```objc\nNSURLRequestCachePolicy cachePolicy = NSURLRequestReloadIgnoringLocalCacheData;\n        if (options & SDWebImageDownloaderUseNSURLCache) {\n            if (options & SDWebImageDownloaderIgnoreCachedResponse) {\n                cachePolicy = NSURLRequestReturnCacheDataDontLoad;\n            } else {\n                cachePolicy = NSURLRequestUseProtocolCachePolicy;\n            }\n        }\n```\n\n生成了request，设置requestheader，cookies\n\n```objc\nNSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url cachePolicy:cachePolicy timeoutInterval:timeoutInterval];\n        request.HTTPShouldHandleCookies = (options & SDWebImageDownloaderHandleCookies);\n        request.HTTPShouldUsePipelining = YES;\n        if (sself.headersFilter) {\n            request.allHTTPHeaderFields = sself.headersFilter(url, [sself.HTTPHeaders copy]);\n        }\n        else {\n            request.allHTTPHeaderFields = sself.HTTPHeaders;\n        }\n```\n\n根据request和session生成SDWebImageDownloaderOperation。对Operation的一些属性进行设置，例如credentials（认证），queuePriority（队列中优先级）等等。\n\n```objc\nSDWebImageDownloaderOperation *operation = [[sself.operationClass alloc] initWithRequest:request inSession:sself.session options:options];\n```\n\n最后加入到downloadQueue队列中，并且添加上一个加入的lastAddedOperation对当前Operation的依赖。保证先进后出的顺序。（可以想象一下，你快速刷新Tableview的时候，同时有很多图片下载，但是如果是FIFO的话，你已经在底部了，图片还是从上往下，按照请求的顺序返回是不是不合理，合理的应该是你当前眼睛看到的那部分图片，也就是最后发出的那些请求先返回，这样就很好理解了。）\n\n```objc\n[sself.downloadQueue addOperation:operation];\n        if (sself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) {\n            [sself.lastAddedOperation addDependency:operation];\n            sself.lastAddedOperation = operation;\n        }\n```\n\n最后返回operation。\n\n此外，还有另外一个方法，就是取消任务的功能。\n\n```objc\n- (void)cancel:(nullable SDWebImageDownloadToken *)token\n```\n\n首先进入到dispatch_barrier_async中执行任务，栅栏函数的作用是，在其队列中，保证在其之前的所有任务都执行完毕后才会执行，并且在其执行完毕后，后面的其他任务才能正常执行。倘若一个队列中所有的函数都是栅栏函数的话，那么这个队列虽然本身是并行队列，但实际效果是串行队列的效果。在dispatch_barrier_async中分别删除callbackBlocks和URLOperations中和token所对应的对象。\n\n##### SDWebImageDownloaderOperation\n\n首先，SDWebImageDownloaderOperation是继承于NSOperation的，把其加入一个队列中，就会自动执行，这是NSOperation的特点。这里的SDWebImageDownloaderOperation是一个自定义NSOperation，自定义NSOperation需要自己实现start方法，自己维护isFinished和isExecuting等属性。\n\n```objc\n- (void)start\n```\n\n在start方法里，大致做了生成unownedSession，dataTask，执行dataTask等工作。\n\n```objc\n[self.dataTask resume]\n```\n\n在开始执行之后，进行调用保存在callbackBlocks中的所有progressBlock，并且设置self.executing = YES。最后发送通知SDWebImageDownloadStartNotification，表示任务已经开始。\n\n同时也要实现done函数，表示任务执行完毕。\n\n```objc\n- (void)done {\n    self.finished = YES;\n    self.executing = NO;\n    [self reset];\n}\n```\n\n一个小tips：\n\n```objc\n@synthesize finished = _finished;\n- (void)setFinished:(BOOL)finished {\n    [self willChangeValueForKey:@\"isFinished\"];\n    _finished = finished;\n    [self didChangeValueForKey:@\"isFinished\"];\n}\n```\n\n这样写的好处是，当我们设置当前的finished时，我们相当于设置了isFinished，所有对其的KVO都会生效。\n\n##### 一些阅读代码过程中的tips\n\n- 使用@synchronized保证线程安全，下面的例子中就是相当于对runningOperations加了锁，保证的其在不同线程访问是不会产生错误。\n\n```objc\n@synchronized (self.runningOperations) {\n        [self.runningOperations addObject:operation];\n    }\n```\n\n","source":"_posts/重读SDWebImage.md","raw":"---\ntitle: 重读SDWebImage\ndate: 2017-09-18 09:51:53\ntags:\n---\n\n#### 重读SDWebImage\n\n很早以前刚接触iOS开发的时候就知道SDWebImage的强大和流行，在大部分的iOS项目中都可以看到她的身影，也是相当经典的第三方库，非常值得阅读，只是一直以来都只是大致了解其运行的流程，并没有深入阅读源码，其中的许多设计和细节都非常值得学习，所以让我们再次去一探究竟。\n\n首先我们从一张时序图来了解SDWebImage最主要的工作流程。![](SDWebImageSequenceDiagram.png)\n\n其工作流程可以分为下列的步骤：\n\n1. 控件调用setImageWithURL接口\n2. 追溯到UIView的loadImageWithURL方法\n3. 在SDWebImageManager中首先通过queryDiskCacheForKey方法寻找所请求的图片是否在沙盒中缓存\n4. 如果有，则直接返回Image，否则通过downloadImage方法使用另外一个类SDWebImageDownloader下载图片，返回结果后，通过storeImage缓存图片，而后再返回Image\n5. 把Image数据set到相应的控件上\n\n了解了基本流程后，我们再看看具体的类结构。![](SDWebImageClassDiagram.png)\n\n初看起来是比较复杂的一张类图，但仔细看看后可以发现其实他们之间的关系是比较清晰的。\n\n- 首先我们从左上角开始看起，对UIButton、UIImageView等控件添加分类方法作为下载图片的入口，所有的方法最终走他们父类UIview的方法sd_internalSetImage\n- SDWebImageManager 作为连接所有类的核心，在sd_internalSetImage方法中通过调用loadImageWithURL进入。\n- SDWebImageCombinedOperation 描述的是一个在Manager层面的下载操作，里面包含了取消block还有真正的下载操作Operation。\n- SDWebImageManagerDelegate 提供一些代理方法给外部使用\n- SDImageCache 看其名字就知道是提供缓存功能的\n- SDImageCacheConfig 配置缓存设置信息的属性及方法\n- SDWebImageDownloader 看其名字也知道是用来下载图片的\n- SDWebImageDownloaderOperation 一个真正的下载任务\n- SDWebImageDownloadToken 用来描述一个下载任务的特征\n- SDWebImageDownloaderOperationInterface 如果想要自定义一个下载任务的话，必须遵守的协议\n- SDWebImagePrefetcher 用来预下载图片的，可以下载完先不使用\n\n这么多类中，其实支撑SDWebImage运作的最主要的三个部分，他们分别是：SDWebImageManager、SDImageCache、SDWebImageDownloader下面我们逐一对其进行细细分析，看看他们到底是怎么工作的。\n\n##### SDWebImageManager\n\n如果我们查看SDWebImageManager.m的源码，会发现其中近一半多的篇幅都被单独一个方法占据了，他就是之前我们提过的：\n\n```objc\n- (id <SDWebImageOperation>)loadImageWithURL:(nullable NSURL *)url options:(SDWebImageOptions)options progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock completed:(nullable SDInternalCompletionBlock)completedBlock;\n```\n\n很明显这个方法中的内容是SDWebImageManager中最核心的工作流程，下面我们逐一梳理其中的逻辑。\n\n1. 检查URL的合法性\n\n2. 检查URL是否曾经失败过\n\n3. 结合上面的信息，选择是否提前回调。\n\n   ```objc\n   [self callCompletionBlockForOperation:operation completion:completedBlock error:[NSError errorWithDomain:NSURLErrorDomain code:NSURLErrorFileDoesNotExist userInfo:nil] url:url];\n   ```\n\n4. 根据URL获取CacheKey，通过CacheKey去本地寻找图片，现在内存中找，如果内存中没有就去沙盒中找，这里使用了GCD异步函数，专门在一个IO线程里做沙盒存取的操作。\n\n   ```objc\n   - (nullable NSOperation *)queryCacheOperationForKey:(nullable NSString *)key done:(nullable SDCacheQueryCompletedBlock)doneBlock {\n       // First check the in-memory cache...\n       UIImage *image = [self imageFromMemoryCacheForKey:key];\n       if (image) {\n           NSData *diskData = nil;\n           if ([image isGIF]) {\n               diskData = [self diskImageDataBySearchingAllPathsForKey:key];\n           }\n           if (doneBlock) {\n               doneBlock(image, diskData, SDImageCacheTypeMemory);\n           }\n           return nil;\n       }\n\n       NSOperation *operation = [NSOperation new];\n       dispatch_async(self.ioQueue, ^{\n           if (operation.isCancelled) {\n               // do not call the completion if cancelled\n               return;\n           }\n           @autoreleasepool {\n               NSData *diskData = [self diskImageDataBySearchingAllPathsForKey:key];\n               UIImage *diskImage = [self diskImageForKey:key];\n               if (diskImage && self.config.shouldCacheImagesInMemory) {\n                   NSUInteger cost = SDCacheCostForImage(diskImage);\n                   [self.memCache setObject:diskImage forKey:key cost:cost];\n               }\n\n               if (doneBlock) {\n                   dispatch_async(dispatch_get_main_queue(), ^{\n                       doneBlock(diskImage, diskData, SDImageCacheTypeDisk);\n                   });\n               }\n           }\n       });\n   ```\n\n5. 如果缓存中有，则回调，没有的话则去网络下载\n\n    这里有个值得一说的点就是作者通过位移运算符做SDWebImageDownloaderOptions的枚举值，通过对枚举值进行或运算可以通过一个值描述多个枚举。\n\n     ```objc\n     SDWebImageDownloaderLowPriority = 1 << 0 //00000001\n     SDWebImageDownloaderProgressiveDownload = 1 << 1 //00000010\n     SDWebImageDownloaderUseNSURLCache = 1 << 2 //00000100\n     options =  SDWebImageDownloaderLowPriority || SDWebImageDownloaderProgressiveDownload || SDWebImageDownloaderUseNSURLCache\n     options = 00000111\n     ```\n\n    设置好配置信息后去网络下载\n\n6. 如果下载成功后就把图片cache起来，然后回调\n\n   ```objc\n    if (downloadedImage && finished) {\n   \t[self.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:nil];}\n   [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:downloadedImage data:downloadedData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url];\n   ```\n\n以上就是SDWebImageManager的主要功能和流程，在这其中包含了对imageCache和imageDownloader的调用，下面我们就先说一说imageCache。\n\n##### SDImageCache\n\n其实SDImageCache的功能很简单，就是对图片的缓存，缓存有两个地方，一个是内存memory，另外一个是沙盒disk。SDImageCache分别提供了对这两个地方进行图片的存、取、删的功能。我们就通过逐一介绍这些方法作为切入点对SDImageCache进行分析。\n\n- 存储Store\n\n  ```objc\n  - (void)storeImage:(nullable UIImage *)image\n           imageData:(nullable NSData *)imageData\n              forKey:(nullable NSString *)key\n              toDisk:(BOOL)toDisk\n          completion:(nullable SDWebImageNoParamsBlock)completionBlock;\n  ```\n\n  这些参数都很好理解，如果cacheconfig中设置了缓存在内存中，则先回把数据缓存进内存，然后再缓存至disk沙盒中。[self checkIfQueueIsIOQueue]检查当前queue是不是IOqueue。然后再把数据写入对应的路径中。\n\n- 取Query\n\n  ```objc\n  - (nullable NSOperation *)queryCacheOperationForKey:(nullable NSString *)key done:(nullable SDCacheQueryCompletedBlock)doneBlock;\n  ```\n\n  最主要的方法就是这个，其中先去内存中寻找，如果没有命中，则异步去disk中再找，如果找到的话，则把当前图片缓存在内存里方便下一次寻找的的同时，返回图片。\n\n- 删除Remove\n\n  ```objc\n  - (void)removeImageForKey:(nullable NSString *)key fromDisk:(BOOL)fromDisk withCompletion:(nullable SDWebImageNoParamsBlock)completion\n  ```\n\n  删除逻辑就比较简单了，如果是cacheconfig是shouldCacheImagesInMemory的话，先删除内存中的，再异步删除disk中的数据，然后跳回主线程执行回调。\n\n##### SDWebImageDownloader\n\n在SDWebImage中另一个非常重要的部分就是下载器SDWebImageDownloader了，总体其使用了NSURLSession和NSOperation进行设计和实现。下面这个方法就是整个下载器最主要的了。\n\n```objc\n- (nullable SDWebImageDownloadToken *)downloadImageWithURL:(nullable NSURL *)url options:(SDWebImageDownloaderOptions)options progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock completed:(nullable SDWebImageDownloaderCompletedBlock)completedBlock;\n```\n\n这个方法首先会转入一个新的方法addProgressCallback，并且直接返回其的返回值。在addProgressCallback中会根据URL去URLOperations里面寻找是否有对应的Operation,没有的话，则把createCallback赋值给Operation。\n\n```objc\noperation = createCallback();\n```\n\n并且加入到数组URLOperations中保存。在URLOperations的完成回调函数里写，在Operation执行完毕后，从URLOperations中删除。\n\n```objc\nid downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];\ntoken = [SDWebImageDownloadToken new];\ntoken.url = url;\ntoken.downloadOperationCancelToken = downloadOperationCancelToken;\n```\n\n通过addHandlersForProgress方法，把过程回调progressBlock和完成回调completedBlock封装在一个downloadOperationCancelToken里面，并且在callbackBlocks中保存。然后再生成一个SDWebImageDownloadToken，分别包含URL和Token信息。最终返回Token\n\n那么到这里，让我们看看前面createCallback()中到底做了什么？\n\n在createCallback()中，我们根据options设置了request的缓存策略\n\n```objc\nNSURLRequestCachePolicy cachePolicy = NSURLRequestReloadIgnoringLocalCacheData;\n        if (options & SDWebImageDownloaderUseNSURLCache) {\n            if (options & SDWebImageDownloaderIgnoreCachedResponse) {\n                cachePolicy = NSURLRequestReturnCacheDataDontLoad;\n            } else {\n                cachePolicy = NSURLRequestUseProtocolCachePolicy;\n            }\n        }\n```\n\n生成了request，设置requestheader，cookies\n\n```objc\nNSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url cachePolicy:cachePolicy timeoutInterval:timeoutInterval];\n        request.HTTPShouldHandleCookies = (options & SDWebImageDownloaderHandleCookies);\n        request.HTTPShouldUsePipelining = YES;\n        if (sself.headersFilter) {\n            request.allHTTPHeaderFields = sself.headersFilter(url, [sself.HTTPHeaders copy]);\n        }\n        else {\n            request.allHTTPHeaderFields = sself.HTTPHeaders;\n        }\n```\n\n根据request和session生成SDWebImageDownloaderOperation。对Operation的一些属性进行设置，例如credentials（认证），queuePriority（队列中优先级）等等。\n\n```objc\nSDWebImageDownloaderOperation *operation = [[sself.operationClass alloc] initWithRequest:request inSession:sself.session options:options];\n```\n\n最后加入到downloadQueue队列中，并且添加上一个加入的lastAddedOperation对当前Operation的依赖。保证先进后出的顺序。（可以想象一下，你快速刷新Tableview的时候，同时有很多图片下载，但是如果是FIFO的话，你已经在底部了，图片还是从上往下，按照请求的顺序返回是不是不合理，合理的应该是你当前眼睛看到的那部分图片，也就是最后发出的那些请求先返回，这样就很好理解了。）\n\n```objc\n[sself.downloadQueue addOperation:operation];\n        if (sself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) {\n            [sself.lastAddedOperation addDependency:operation];\n            sself.lastAddedOperation = operation;\n        }\n```\n\n最后返回operation。\n\n此外，还有另外一个方法，就是取消任务的功能。\n\n```objc\n- (void)cancel:(nullable SDWebImageDownloadToken *)token\n```\n\n首先进入到dispatch_barrier_async中执行任务，栅栏函数的作用是，在其队列中，保证在其之前的所有任务都执行完毕后才会执行，并且在其执行完毕后，后面的其他任务才能正常执行。倘若一个队列中所有的函数都是栅栏函数的话，那么这个队列虽然本身是并行队列，但实际效果是串行队列的效果。在dispatch_barrier_async中分别删除callbackBlocks和URLOperations中和token所对应的对象。\n\n##### SDWebImageDownloaderOperation\n\n首先，SDWebImageDownloaderOperation是继承于NSOperation的，把其加入一个队列中，就会自动执行，这是NSOperation的特点。这里的SDWebImageDownloaderOperation是一个自定义NSOperation，自定义NSOperation需要自己实现start方法，自己维护isFinished和isExecuting等属性。\n\n```objc\n- (void)start\n```\n\n在start方法里，大致做了生成unownedSession，dataTask，执行dataTask等工作。\n\n```objc\n[self.dataTask resume]\n```\n\n在开始执行之后，进行调用保存在callbackBlocks中的所有progressBlock，并且设置self.executing = YES。最后发送通知SDWebImageDownloadStartNotification，表示任务已经开始。\n\n同时也要实现done函数，表示任务执行完毕。\n\n```objc\n- (void)done {\n    self.finished = YES;\n    self.executing = NO;\n    [self reset];\n}\n```\n\n一个小tips：\n\n```objc\n@synthesize finished = _finished;\n- (void)setFinished:(BOOL)finished {\n    [self willChangeValueForKey:@\"isFinished\"];\n    _finished = finished;\n    [self didChangeValueForKey:@\"isFinished\"];\n}\n```\n\n这样写的好处是，当我们设置当前的finished时，我们相当于设置了isFinished，所有对其的KVO都会生效。\n\n##### 一些阅读代码过程中的tips\n\n- 使用@synchronized保证线程安全，下面的例子中就是相当于对runningOperations加了锁，保证的其在不同线程访问是不会产生错误。\n\n```objc\n@synchronized (self.runningOperations) {\n        [self.runningOperations addObject:operation];\n    }\n```\n\n","slug":"重读SDWebImage","published":1,"updated":"2017-09-27T01:54:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaag2mro0005hgodvwhvmo5a","content":"<h4 id=\"&#x91CD;&#x8BFB;SDWebImage\"><a href=\"#&#x91CD;&#x8BFB;SDWebImage\" class=\"headerlink\" title=\"&#x91CD;&#x8BFB;SDWebImage\"></a>&#x91CD;&#x8BFB;SDWebImage</h4><p>&#x5F88;&#x65E9;&#x4EE5;&#x524D;&#x521A;&#x63A5;&#x89E6;iOS&#x5F00;&#x53D1;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x77E5;&#x9053;SDWebImage&#x7684;&#x5F3A;&#x5927;&#x548C;&#x6D41;&#x884C;&#xFF0C;&#x5728;&#x5927;&#x90E8;&#x5206;&#x7684;iOS&#x9879;&#x76EE;&#x4E2D;&#x90FD;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x5979;&#x7684;&#x8EAB;&#x5F71;&#xFF0C;&#x4E5F;&#x662F;&#x76F8;&#x5F53;&#x7ECF;&#x5178;&#x7684;&#x7B2C;&#x4E09;&#x65B9;&#x5E93;&#xFF0C;&#x975E;&#x5E38;&#x503C;&#x5F97;&#x9605;&#x8BFB;&#xFF0C;&#x53EA;&#x662F;&#x4E00;&#x76F4;&#x4EE5;&#x6765;&#x90FD;&#x53EA;&#x662F;&#x5927;&#x81F4;&#x4E86;&#x89E3;&#x5176;&#x8FD0;&#x884C;&#x7684;&#x6D41;&#x7A0B;&#xFF0C;&#x5E76;&#x6CA1;&#x6709;&#x6DF1;&#x5165;&#x9605;&#x8BFB;&#x6E90;&#x7801;&#xFF0C;&#x5176;&#x4E2D;&#x7684;&#x8BB8;&#x591A;&#x8BBE;&#x8BA1;&#x548C;&#x7EC6;&#x8282;&#x90FD;&#x975E;&#x5E38;&#x503C;&#x5F97;&#x5B66;&#x4E60;&#xFF0C;&#x6240;&#x4EE5;&#x8BA9;&#x6211;&#x4EEC;&#x518D;&#x6B21;&#x53BB;&#x4E00;&#x63A2;&#x7A76;&#x7ADF;&#x3002;</p>\n<p>&#x9996;&#x5148;&#x6211;&#x4EEC;&#x4ECE;&#x4E00;&#x5F20;&#x65F6;&#x5E8F;&#x56FE;&#x6765;&#x4E86;&#x89E3;SDWebImage&#x6700;&#x4E3B;&#x8981;&#x7684;&#x5DE5;&#x4F5C;&#x6D41;&#x7A0B;&#x3002;<a class=\"magnific-img\" href=\"/2017/09/18/&#x91CD;&#x8BFB;SDWebImage/SDWebImageSequenceDiagram.png\"><img src=\"/2017/09/18/&#x91CD;&#x8BFB;SDWebImage/SDWebImageSequenceDiagram.png\" alt=\"\" class=\"ui centered image\"></a></p>\n<p>&#x5176;&#x5DE5;&#x4F5C;&#x6D41;&#x7A0B;&#x53EF;&#x4EE5;&#x5206;&#x4E3A;&#x4E0B;&#x5217;&#x7684;&#x6B65;&#x9AA4;&#xFF1A;</p>\n<ol class=\"ui list\">\n<li>&#x63A7;&#x4EF6;&#x8C03;&#x7528;setImageWithURL&#x63A5;&#x53E3;</li>\n<li>&#x8FFD;&#x6EAF;&#x5230;UIView&#x7684;loadImageWithURL&#x65B9;&#x6CD5;</li>\n<li>&#x5728;SDWebImageManager&#x4E2D;&#x9996;&#x5148;&#x901A;&#x8FC7;queryDiskCacheForKey&#x65B9;&#x6CD5;&#x5BFB;&#x627E;&#x6240;&#x8BF7;&#x6C42;&#x7684;&#x56FE;&#x7247;&#x662F;&#x5426;&#x5728;&#x6C99;&#x76D2;&#x4E2D;&#x7F13;&#x5B58;</li>\n<li>&#x5982;&#x679C;&#x6709;&#xFF0C;&#x5219;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;Image&#xFF0C;&#x5426;&#x5219;&#x901A;&#x8FC7;downloadImage&#x65B9;&#x6CD5;&#x4F7F;&#x7528;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x7C7B;SDWebImageDownloader&#x4E0B;&#x8F7D;&#x56FE;&#x7247;&#xFF0C;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x540E;&#xFF0C;&#x901A;&#x8FC7;storeImage&#x7F13;&#x5B58;&#x56FE;&#x7247;&#xFF0C;&#x800C;&#x540E;&#x518D;&#x8FD4;&#x56DE;Image</li>\n<li>&#x628A;Image&#x6570;&#x636E;set&#x5230;&#x76F8;&#x5E94;&#x7684;&#x63A7;&#x4EF6;&#x4E0A;</li>\n</ol>\n<p>&#x4E86;&#x89E3;&#x4E86;&#x57FA;&#x672C;&#x6D41;&#x7A0B;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x518D;&#x770B;&#x770B;&#x5177;&#x4F53;&#x7684;&#x7C7B;&#x7ED3;&#x6784;&#x3002;<a class=\"magnific-img\" href=\"/2017/09/18/&#x91CD;&#x8BFB;SDWebImage/SDWebImageClassDiagram.png\"><img src=\"/2017/09/18/&#x91CD;&#x8BFB;SDWebImage/SDWebImageClassDiagram.png\" alt=\"\" class=\"ui centered image\"></a></p>\n<p>&#x521D;&#x770B;&#x8D77;&#x6765;&#x662F;&#x6BD4;&#x8F83;&#x590D;&#x6742;&#x7684;&#x4E00;&#x5F20;&#x7C7B;&#x56FE;&#xFF0C;&#x4F46;&#x4ED4;&#x7EC6;&#x770B;&#x770B;&#x540E;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#x5176;&#x5B9E;&#x4ED6;&#x4EEC;&#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;&#x662F;&#x6BD4;&#x8F83;&#x6E05;&#x6670;&#x7684;&#x3002;</p>\n<ul class=\"ui list\">\n<li>&#x9996;&#x5148;&#x6211;&#x4EEC;&#x4ECE;&#x5DE6;&#x4E0A;&#x89D2;&#x5F00;&#x59CB;&#x770B;&#x8D77;&#xFF0C;&#x5BF9;UIButton&#x3001;UIImageView&#x7B49;&#x63A7;&#x4EF6;&#x6DFB;&#x52A0;&#x5206;&#x7C7B;&#x65B9;&#x6CD5;&#x4F5C;&#x4E3A;&#x4E0B;&#x8F7D;&#x56FE;&#x7247;&#x7684;&#x5165;&#x53E3;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x65B9;&#x6CD5;&#x6700;&#x7EC8;&#x8D70;&#x4ED6;&#x4EEC;&#x7236;&#x7C7B;UIview&#x7684;&#x65B9;&#x6CD5;sd_internalSetImage</li>\n<li>SDWebImageManager &#x4F5C;&#x4E3A;&#x8FDE;&#x63A5;&#x6240;&#x6709;&#x7C7B;&#x7684;&#x6838;&#x5FC3;&#xFF0C;&#x5728;sd_internalSetImage&#x65B9;&#x6CD5;&#x4E2D;&#x901A;&#x8FC7;&#x8C03;&#x7528;loadImageWithURL&#x8FDB;&#x5165;&#x3002;</li>\n<li>SDWebImageCombinedOperation &#x63CF;&#x8FF0;&#x7684;&#x662F;&#x4E00;&#x4E2A;&#x5728;Manager&#x5C42;&#x9762;&#x7684;&#x4E0B;&#x8F7D;&#x64CD;&#x4F5C;&#xFF0C;&#x91CC;&#x9762;&#x5305;&#x542B;&#x4E86;&#x53D6;&#x6D88;block&#x8FD8;&#x6709;&#x771F;&#x6B63;&#x7684;&#x4E0B;&#x8F7D;&#x64CD;&#x4F5C;Operation&#x3002;</li>\n<li>SDWebImageManagerDelegate &#x63D0;&#x4F9B;&#x4E00;&#x4E9B;&#x4EE3;&#x7406;&#x65B9;&#x6CD5;&#x7ED9;&#x5916;&#x90E8;&#x4F7F;&#x7528;</li>\n<li>SDImageCache &#x770B;&#x5176;&#x540D;&#x5B57;&#x5C31;&#x77E5;&#x9053;&#x662F;&#x63D0;&#x4F9B;&#x7F13;&#x5B58;&#x529F;&#x80FD;&#x7684;</li>\n<li>SDImageCacheConfig &#x914D;&#x7F6E;&#x7F13;&#x5B58;&#x8BBE;&#x7F6E;&#x4FE1;&#x606F;&#x7684;&#x5C5E;&#x6027;&#x53CA;&#x65B9;&#x6CD5;</li>\n<li>SDWebImageDownloader &#x770B;&#x5176;&#x540D;&#x5B57;&#x4E5F;&#x77E5;&#x9053;&#x662F;&#x7528;&#x6765;&#x4E0B;&#x8F7D;&#x56FE;&#x7247;&#x7684;</li>\n<li>SDWebImageDownloaderOperation &#x4E00;&#x4E2A;&#x771F;&#x6B63;&#x7684;&#x4E0B;&#x8F7D;&#x4EFB;&#x52A1;</li>\n<li>SDWebImageDownloadToken &#x7528;&#x6765;&#x63CF;&#x8FF0;&#x4E00;&#x4E2A;&#x4E0B;&#x8F7D;&#x4EFB;&#x52A1;&#x7684;&#x7279;&#x5F81;</li>\n<li>SDWebImageDownloaderOperationInterface &#x5982;&#x679C;&#x60F3;&#x8981;&#x81EA;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x4E0B;&#x8F7D;&#x4EFB;&#x52A1;&#x7684;&#x8BDD;&#xFF0C;&#x5FC5;&#x987B;&#x9075;&#x5B88;&#x7684;&#x534F;&#x8BAE;</li>\n<li>SDWebImagePrefetcher &#x7528;&#x6765;&#x9884;&#x4E0B;&#x8F7D;&#x56FE;&#x7247;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x4E0B;&#x8F7D;&#x5B8C;&#x5148;&#x4E0D;&#x4F7F;&#x7528;</li>\n</ul>\n<p>&#x8FD9;&#x4E48;&#x591A;&#x7C7B;&#x4E2D;&#xFF0C;&#x5176;&#x5B9E;&#x652F;&#x6491;SDWebImage&#x8FD0;&#x4F5C;&#x7684;&#x6700;&#x4E3B;&#x8981;&#x7684;&#x4E09;&#x4E2A;&#x90E8;&#x5206;&#xFF0C;&#x4ED6;&#x4EEC;&#x5206;&#x522B;&#x662F;&#xFF1A;SDWebImageManager&#x3001;SDImageCache&#x3001;SDWebImageDownloader&#x4E0B;&#x9762;&#x6211;&#x4EEC;&#x9010;&#x4E00;&#x5BF9;&#x5176;&#x8FDB;&#x884C;&#x7EC6;&#x7EC6;&#x5206;&#x6790;&#xFF0C;&#x770B;&#x770B;&#x4ED6;&#x4EEC;&#x5230;&#x5E95;&#x662F;&#x600E;&#x4E48;&#x5DE5;&#x4F5C;&#x7684;&#x3002;</p>\n<h5 id=\"SDWebImageManager\"><a href=\"#SDWebImageManager\" class=\"headerlink\" title=\"SDWebImageManager\"></a>SDWebImageManager</h5><p>&#x5982;&#x679C;&#x6211;&#x4EEC;&#x67E5;&#x770B;SDWebImageManager.m&#x7684;&#x6E90;&#x7801;&#xFF0C;&#x4F1A;&#x53D1;&#x73B0;&#x5176;&#x4E2D;&#x8FD1;&#x4E00;&#x534A;&#x591A;&#x7684;&#x7BC7;&#x5E45;&#x90FD;&#x88AB;&#x5355;&#x72EC;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x5360;&#x636E;&#x4E86;&#xFF0C;&#x4ED6;&#x5C31;&#x662F;&#x4E4B;&#x524D;&#x6211;&#x4EEC;&#x63D0;&#x8FC7;&#x7684;&#xFF1A;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span> &lt;SDWebImageOperation&gt;)loadImageWithURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url options:(SDWebImageOptions)options progress:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock completed:(<span class=\"keyword\">nullable</span> SDInternalCompletionBlock)completedBlock;</div></pre></td></tr></table></figure>\n<p>&#x5F88;&#x660E;&#x663E;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4E2D;&#x7684;&#x5185;&#x5BB9;&#x662F;SDWebImageManager&#x4E2D;&#x6700;&#x6838;&#x5FC3;&#x7684;&#x5DE5;&#x4F5C;&#x6D41;&#x7A0B;&#xFF0C;&#x4E0B;&#x9762;&#x6211;&#x4EEC;&#x9010;&#x4E00;&#x68B3;&#x7406;&#x5176;&#x4E2D;&#x7684;&#x903B;&#x8F91;&#x3002;</p>\n<ol class=\"ui list\">\n<li><p>&#x68C0;&#x67E5;URL&#x7684;&#x5408;&#x6CD5;&#x6027;</p>\n</li>\n<li><p>&#x68C0;&#x67E5;URL&#x662F;&#x5426;&#x66FE;&#x7ECF;&#x5931;&#x8D25;&#x8FC7;</p>\n</li>\n<li><p>&#x7ED3;&#x5408;&#x4E0A;&#x9762;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x9009;&#x62E9;&#x662F;&#x5426;&#x63D0;&#x524D;&#x56DE;&#x8C03;&#x3002;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span> callCompletionBlockForOperation:operation completion:completedBlock error:[<span class=\"built_in\">NSError</span> errorWithDomain:<span class=\"built_in\">NSURLErrorDomain</span> code:<span class=\"built_in\">NSURLErrorFileDoesNotExist</span> userInfo:<span class=\"literal\">nil</span>] url:url];</div></pre></td></tr></table></figure>\n</li>\n<li><p>&#x6839;&#x636E;URL&#x83B7;&#x53D6;CacheKey&#xFF0C;&#x901A;&#x8FC7;CacheKey&#x53BB;&#x672C;&#x5730;&#x5BFB;&#x627E;&#x56FE;&#x7247;&#xFF0C;&#x73B0;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x627E;&#xFF0C;&#x5982;&#x679C;&#x5185;&#x5B58;&#x4E2D;&#x6CA1;&#x6709;&#x5C31;&#x53BB;&#x6C99;&#x76D2;&#x4E2D;&#x627E;&#xFF0C;&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x4E86;GCD&#x5F02;&#x6B65;&#x51FD;&#x6570;&#xFF0C;&#x4E13;&#x95E8;&#x5728;&#x4E00;&#x4E2A;IO&#x7EBF;&#x7A0B;&#x91CC;&#x505A;&#x6C99;&#x76D2;&#x5B58;&#x53D6;&#x7684;&#x64CD;&#x4F5C;&#x3002;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSOperation</span> *)queryCacheOperationForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key done:(<span class=\"keyword\">nullable</span> SDCacheQueryCompletedBlock)doneBlock {</div><div class=\"line\">    <span class=\"comment\">// First check the in-memory cache...</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image = [<span class=\"keyword\">self</span> imageFromMemoryCacheForKey:key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (image) {</div><div class=\"line\">        <span class=\"built_in\">NSData</span> *diskData = <span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([image isGIF]) {</div><div class=\"line\">            diskData = [<span class=\"keyword\">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">if</span> (doneBlock) {</div><div class=\"line\">            doneBlock(image, diskData, SDImageCacheTypeMemory);</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSOperation</span> *operation = [<span class=\"built_in\">NSOperation</span> new];</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^{</div><div class=\"line\">        <span class=\"keyword\">if</span> (operation.isCancelled) {</div><div class=\"line\">            <span class=\"comment\">// do not call the completion if cancelled</span></div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">@autoreleasepool</span> {</div><div class=\"line\">            <span class=\"built_in\">NSData</span> *diskData = [<span class=\"keyword\">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class=\"line\">            <span class=\"built_in\">UIImage</span> *diskImage = [<span class=\"keyword\">self</span> diskImageForKey:key];</div><div class=\"line\">            <span class=\"keyword\">if</span> (diskImage &amp;&amp; <span class=\"keyword\">self</span>.config.shouldCacheImagesInMemory) {</div><div class=\"line\">                <span class=\"built_in\">NSUInteger</span> cost = SDCacheCostForImage(diskImage);</div><div class=\"line\">                [<span class=\"keyword\">self</span>.memCache setObject:diskImage forKey:key cost:cost];</div><div class=\"line\">            }</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (doneBlock) {</div><div class=\"line\">                <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^{</div><div class=\"line\">                    doneBlock(diskImage, diskData, SDImageCacheTypeDisk);</div><div class=\"line\">                });</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">    });</div></pre></td></tr></table></figure>\n</li>\n<li><p>&#x5982;&#x679C;&#x7F13;&#x5B58;&#x4E2D;&#x6709;&#xFF0C;&#x5219;&#x56DE;&#x8C03;&#xFF0C;&#x6CA1;&#x6709;&#x7684;&#x8BDD;&#x5219;&#x53BB;&#x7F51;&#x7EDC;&#x4E0B;&#x8F7D;</p>\n<p> &#x8FD9;&#x91CC;&#x6709;&#x4E2A;&#x503C;&#x5F97;&#x4E00;&#x8BF4;&#x7684;&#x70B9;&#x5C31;&#x662F;&#x4F5C;&#x8005;&#x901A;&#x8FC7;&#x4F4D;&#x79FB;&#x8FD0;&#x7B97;&#x7B26;&#x505A;SDWebImageDownloaderOptions&#x7684;&#x679A;&#x4E3E;&#x503C;&#xFF0C;&#x901A;&#x8FC7;&#x5BF9;&#x679A;&#x4E3E;&#x503C;&#x8FDB;&#x884C;&#x6216;&#x8FD0;&#x7B97;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x503C;&#x63CF;&#x8FF0;&#x591A;&#x4E2A;&#x679A;&#x4E3E;&#x3002;</p>\n  <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">SDWebImageDownloaderLowPriority = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">0</span> <span class=\"comment\">//00000001</span></div><div class=\"line\">SDWebImageDownloaderProgressiveDownload = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">1</span> <span class=\"comment\">//00000010</span></div><div class=\"line\">SDWebImageDownloaderUseNSURLCache = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">2</span> <span class=\"comment\">//00000100</span></div><div class=\"line\">options =  SDWebImageDownloaderLowPriority || SDWebImageDownloaderProgressiveDownload || SDWebImageDownloaderUseNSURLCache</div><div class=\"line\">options = <span class=\"number\">00000111</span></div></pre></td></tr></table></figure>\n<p> &#x8BBE;&#x7F6E;&#x597D;&#x914D;&#x7F6E;&#x4FE1;&#x606F;&#x540E;&#x53BB;&#x7F51;&#x7EDC;&#x4E0B;&#x8F7D;</p>\n</li>\n<li><p>&#x5982;&#x679C;&#x4E0B;&#x8F7D;&#x6210;&#x529F;&#x540E;&#x5C31;&#x628A;&#x56FE;&#x7247;cache&#x8D77;&#x6765;&#xFF0C;&#x7136;&#x540E;&#x56DE;&#x8C03;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">if</span> (downloadedImage &amp;&amp; finished) {</div><div class=\"line\">\t[<span class=\"keyword\">self</span>.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:<span class=\"literal\">nil</span>];}</div><div class=\"line\">[<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:downloadedImage data:downloadedData error:<span class=\"literal\">nil</span> cacheType:SDImageCacheTypeNone finished:finished url:url];</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>&#x4EE5;&#x4E0A;&#x5C31;&#x662F;SDWebImageManager&#x7684;&#x4E3B;&#x8981;&#x529F;&#x80FD;&#x548C;&#x6D41;&#x7A0B;&#xFF0C;&#x5728;&#x8FD9;&#x5176;&#x4E2D;&#x5305;&#x542B;&#x4E86;&#x5BF9;imageCache&#x548C;imageDownloader&#x7684;&#x8C03;&#x7528;&#xFF0C;&#x4E0B;&#x9762;&#x6211;&#x4EEC;&#x5C31;&#x5148;&#x8BF4;&#x4E00;&#x8BF4;imageCache&#x3002;</p>\n<h5 id=\"SDImageCache\"><a href=\"#SDImageCache\" class=\"headerlink\" title=\"SDImageCache\"></a>SDImageCache</h5><p>&#x5176;&#x5B9E;SDImageCache&#x7684;&#x529F;&#x80FD;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5C31;&#x662F;&#x5BF9;&#x56FE;&#x7247;&#x7684;&#x7F13;&#x5B58;&#xFF0C;&#x7F13;&#x5B58;&#x6709;&#x4E24;&#x4E2A;&#x5730;&#x65B9;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;&#x5185;&#x5B58;memory&#xFF0C;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x662F;&#x6C99;&#x76D2;disk&#x3002;SDImageCache&#x5206;&#x522B;&#x63D0;&#x4F9B;&#x4E86;&#x5BF9;&#x8FD9;&#x4E24;&#x4E2A;&#x5730;&#x65B9;&#x8FDB;&#x884C;&#x56FE;&#x7247;&#x7684;&#x5B58;&#x3001;&#x53D6;&#x3001;&#x5220;&#x7684;&#x529F;&#x80FD;&#x3002;&#x6211;&#x4EEC;&#x5C31;&#x901A;&#x8FC7;&#x9010;&#x4E00;&#x4ECB;&#x7ECD;&#x8FD9;&#x4E9B;&#x65B9;&#x6CD5;&#x4F5C;&#x4E3A;&#x5207;&#x5165;&#x70B9;&#x5BF9;SDImageCache&#x8FDB;&#x884C;&#x5206;&#x6790;&#x3002;</p>\n<ul class=\"ui list\">\n<li><p>&#x5B58;&#x50A8;Store</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)storeImage:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)image</div><div class=\"line\">         imageData:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSData</span> *)imageData</div><div class=\"line\">            forKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key</div><div class=\"line\">            toDisk:(<span class=\"built_in\">BOOL</span>)toDisk</div><div class=\"line\">        completion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completionBlock;</div></pre></td></tr></table></figure>\n<p>&#x8FD9;&#x4E9B;&#x53C2;&#x6570;&#x90FD;&#x5F88;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x5982;&#x679C;cacheconfig&#x4E2D;&#x8BBE;&#x7F6E;&#x4E86;&#x7F13;&#x5B58;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#xFF0C;&#x5219;&#x5148;&#x56DE;&#x628A;&#x6570;&#x636E;&#x7F13;&#x5B58;&#x8FDB;&#x5185;&#x5B58;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x7F13;&#x5B58;&#x81F3;disk&#x6C99;&#x76D2;&#x4E2D;&#x3002;[self checkIfQueueIsIOQueue]&#x68C0;&#x67E5;&#x5F53;&#x524D;queue&#x662F;&#x4E0D;&#x662F;IOqueue&#x3002;&#x7136;&#x540E;&#x518D;&#x628A;&#x6570;&#x636E;&#x5199;&#x5165;&#x5BF9;&#x5E94;&#x7684;&#x8DEF;&#x5F84;&#x4E2D;&#x3002;</p>\n</li>\n<li><p>&#x53D6;Query</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSOperation</span> *)queryCacheOperationForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key done:(<span class=\"keyword\">nullable</span> SDCacheQueryCompletedBlock)doneBlock;</div></pre></td></tr></table></figure>\n<p>&#x6700;&#x4E3B;&#x8981;&#x7684;&#x65B9;&#x6CD5;&#x5C31;&#x662F;&#x8FD9;&#x4E2A;&#xFF0C;&#x5176;&#x4E2D;&#x5148;&#x53BB;&#x5185;&#x5B58;&#x4E2D;&#x5BFB;&#x627E;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x547D;&#x4E2D;&#xFF0C;&#x5219;&#x5F02;&#x6B65;&#x53BB;disk&#x4E2D;&#x518D;&#x627E;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#x7684;&#x8BDD;&#xFF0C;&#x5219;&#x628A;&#x5F53;&#x524D;&#x56FE;&#x7247;&#x7F13;&#x5B58;&#x5728;&#x5185;&#x5B58;&#x91CC;&#x65B9;&#x4FBF;&#x4E0B;&#x4E00;&#x6B21;&#x5BFB;&#x627E;&#x7684;&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x8FD4;&#x56DE;&#x56FE;&#x7247;&#x3002;</p>\n</li>\n<li><p>&#x5220;&#x9664;Remove</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)removeImageForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key fromDisk:(<span class=\"built_in\">BOOL</span>)fromDisk withCompletion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completion</div></pre></td></tr></table></figure>\n<p>&#x5220;&#x9664;&#x903B;&#x8F91;&#x5C31;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#x4E86;&#xFF0C;&#x5982;&#x679C;&#x662F;cacheconfig&#x662F;shouldCacheImagesInMemory&#x7684;&#x8BDD;&#xFF0C;&#x5148;&#x5220;&#x9664;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#xFF0C;&#x518D;&#x5F02;&#x6B65;&#x5220;&#x9664;disk&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x7136;&#x540E;&#x8DF3;&#x56DE;&#x4E3B;&#x7EBF;&#x7A0B;&#x6267;&#x884C;&#x56DE;&#x8C03;&#x3002;</p>\n</li>\n</ul>\n<h5 id=\"SDWebImageDownloader\"><a href=\"#SDWebImageDownloader\" class=\"headerlink\" title=\"SDWebImageDownloader\"></a>SDWebImageDownloader</h5><p>&#x5728;SDWebImage&#x4E2D;&#x53E6;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x7684;&#x90E8;&#x5206;&#x5C31;&#x662F;&#x4E0B;&#x8F7D;&#x5668;SDWebImageDownloader&#x4E86;&#xFF0C;&#x603B;&#x4F53;&#x5176;&#x4F7F;&#x7528;&#x4E86;NSURLSession&#x548C;NSOperation&#x8FDB;&#x884C;&#x8BBE;&#x8BA1;&#x548C;&#x5B9E;&#x73B0;&#x3002;&#x4E0B;&#x9762;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x5C31;&#x662F;&#x6574;&#x4E2A;&#x4E0B;&#x8F7D;&#x5668;&#x6700;&#x4E3B;&#x8981;&#x7684;&#x4E86;&#x3002;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> SDWebImageDownloadToken *)downloadImageWithURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url options:(SDWebImageDownloaderOptions)options progress:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock completed:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderCompletedBlock)completedBlock;</div></pre></td></tr></table></figure>\n<p>&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x9996;&#x5148;&#x4F1A;&#x8F6C;&#x5165;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x65B9;&#x6CD5;addProgressCallback&#xFF0C;&#x5E76;&#x4E14;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;&#x5176;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x3002;&#x5728;addProgressCallback&#x4E2D;&#x4F1A;&#x6839;&#x636E;URL&#x53BB;URLOperations&#x91CC;&#x9762;&#x5BFB;&#x627E;&#x662F;&#x5426;&#x6709;&#x5BF9;&#x5E94;&#x7684;Operation,&#x6CA1;&#x6709;&#x7684;&#x8BDD;&#xFF0C;&#x5219;&#x628A;createCallback&#x8D4B;&#x503C;&#x7ED9;Operation&#x3002;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">operation = createCallback();</div></pre></td></tr></table></figure>\n<p>&#x5E76;&#x4E14;&#x52A0;&#x5165;&#x5230;&#x6570;&#x7EC4;URLOperations&#x4E2D;&#x4FDD;&#x5B58;&#x3002;&#x5728;URLOperations&#x7684;&#x5B8C;&#x6210;&#x56DE;&#x8C03;&#x51FD;&#x6570;&#x91CC;&#x5199;&#xFF0C;&#x5728;Operation&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x540E;&#xFF0C;&#x4ECE;URLOperations&#x4E2D;&#x5220;&#x9664;&#x3002;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];</div><div class=\"line\">token = [SDWebImageDownloadToken new];</div><div class=\"line\">token.url = url;</div><div class=\"line\">token.downloadOperationCancelToken = downloadOperationCancelToken;</div></pre></td></tr></table></figure>\n<p>&#x901A;&#x8FC7;addHandlersForProgress&#x65B9;&#x6CD5;&#xFF0C;&#x628A;&#x8FC7;&#x7A0B;&#x56DE;&#x8C03;progressBlock&#x548C;&#x5B8C;&#x6210;&#x56DE;&#x8C03;completedBlock&#x5C01;&#x88C5;&#x5728;&#x4E00;&#x4E2A;downloadOperationCancelToken&#x91CC;&#x9762;&#xFF0C;&#x5E76;&#x4E14;&#x5728;callbackBlocks&#x4E2D;&#x4FDD;&#x5B58;&#x3002;&#x7136;&#x540E;&#x518D;&#x751F;&#x6210;&#x4E00;&#x4E2A;SDWebImageDownloadToken&#xFF0C;&#x5206;&#x522B;&#x5305;&#x542B;URL&#x548C;Token&#x4FE1;&#x606F;&#x3002;&#x6700;&#x7EC8;&#x8FD4;&#x56DE;Token</p>\n<p>&#x90A3;&#x4E48;&#x5230;&#x8FD9;&#x91CC;&#xFF0C;&#x8BA9;&#x6211;&#x4EEC;&#x770B;&#x770B;&#x524D;&#x9762;createCallback()&#x4E2D;&#x5230;&#x5E95;&#x505A;&#x4E86;&#x4EC0;&#x4E48;&#xFF1F;</p>\n<p>&#x5728;createCallback()&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x6839;&#x636E;options&#x8BBE;&#x7F6E;&#x4E86;request&#x7684;&#x7F13;&#x5B58;&#x7B56;&#x7565;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSURLRequestCachePolicy</span> cachePolicy = <span class=\"built_in\">NSURLRequestReloadIgnoringLocalCacheData</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (options &amp; SDWebImageDownloaderUseNSURLCache) {</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageDownloaderIgnoreCachedResponse) {</div><div class=\"line\">                cachePolicy = <span class=\"built_in\">NSURLRequestReturnCacheDataDontLoad</span>;</div><div class=\"line\">            } <span class=\"keyword\">else</span> {</div><div class=\"line\">                cachePolicy = <span class=\"built_in\">NSURLRequestUseProtocolCachePolicy</span>;</div><div class=\"line\">            }</div><div class=\"line\">        }</div></pre></td></tr></table></figure>\n<p>&#x751F;&#x6210;&#x4E86;request&#xFF0C;&#x8BBE;&#x7F6E;requestheader&#xFF0C;cookies</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSMutableURLRequest</span> *request = [[<span class=\"built_in\">NSMutableURLRequest</span> alloc] initWithURL:url cachePolicy:cachePolicy timeoutInterval:timeoutInterval];</div><div class=\"line\">        request.HTTPShouldHandleCookies = (options &amp; SDWebImageDownloaderHandleCookies);</div><div class=\"line\">        request.HTTPShouldUsePipelining = <span class=\"literal\">YES</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sself.headersFilter) {</div><div class=\"line\">            request.allHTTPHeaderFields = sself.headersFilter(url, [sself.HTTPHeaders <span class=\"keyword\">copy</span>]);</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span> {</div><div class=\"line\">            request.allHTTPHeaderFields = sself.HTTPHeaders;</div><div class=\"line\">        }</div></pre></td></tr></table></figure>\n<p>&#x6839;&#x636E;request&#x548C;session&#x751F;&#x6210;SDWebImageDownloaderOperation&#x3002;&#x5BF9;Operation&#x7684;&#x4E00;&#x4E9B;&#x5C5E;&#x6027;&#x8FDB;&#x884C;&#x8BBE;&#x7F6E;&#xFF0C;&#x4F8B;&#x5982;credentials&#xFF08;&#x8BA4;&#x8BC1;&#xFF09;&#xFF0C;queuePriority&#xFF08;&#x961F;&#x5217;&#x4E2D;&#x4F18;&#x5148;&#x7EA7;&#xFF09;&#x7B49;&#x7B49;&#x3002;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SDWebImageDownloaderOperation *operation = [[sself.operationClass alloc] initWithRequest:request inSession:sself.session options:options];</div></pre></td></tr></table></figure>\n<p>&#x6700;&#x540E;&#x52A0;&#x5165;&#x5230;downloadQueue&#x961F;&#x5217;&#x4E2D;&#xFF0C;&#x5E76;&#x4E14;&#x6DFB;&#x52A0;&#x4E0A;&#x4E00;&#x4E2A;&#x52A0;&#x5165;&#x7684;lastAddedOperation&#x5BF9;&#x5F53;&#x524D;Operation&#x7684;&#x4F9D;&#x8D56;&#x3002;&#x4FDD;&#x8BC1;&#x5148;&#x8FDB;&#x540E;&#x51FA;&#x7684;&#x987A;&#x5E8F;&#x3002;&#xFF08;&#x53EF;&#x4EE5;&#x60F3;&#x8C61;&#x4E00;&#x4E0B;&#xFF0C;&#x4F60;&#x5FEB;&#x901F;&#x5237;&#x65B0;Tableview&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x540C;&#x65F6;&#x6709;&#x5F88;&#x591A;&#x56FE;&#x7247;&#x4E0B;&#x8F7D;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x662F;FIFO&#x7684;&#x8BDD;&#xFF0C;&#x4F60;&#x5DF2;&#x7ECF;&#x5728;&#x5E95;&#x90E8;&#x4E86;&#xFF0C;&#x56FE;&#x7247;&#x8FD8;&#x662F;&#x4ECE;&#x4E0A;&#x5F80;&#x4E0B;&#xFF0C;&#x6309;&#x7167;&#x8BF7;&#x6C42;&#x7684;&#x987A;&#x5E8F;&#x8FD4;&#x56DE;&#x662F;&#x4E0D;&#x662F;&#x4E0D;&#x5408;&#x7406;&#xFF0C;&#x5408;&#x7406;&#x7684;&#x5E94;&#x8BE5;&#x662F;&#x4F60;&#x5F53;&#x524D;&#x773C;&#x775B;&#x770B;&#x5230;&#x7684;&#x90A3;&#x90E8;&#x5206;&#x56FE;&#x7247;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6700;&#x540E;&#x53D1;&#x51FA;&#x7684;&#x90A3;&#x4E9B;&#x8BF7;&#x6C42;&#x5148;&#x8FD4;&#x56DE;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x5F88;&#x597D;&#x7406;&#x89E3;&#x4E86;&#x3002;&#xFF09;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[sself.downloadQueue addOperation:operation];</div><div class=\"line\">        <span class=\"keyword\">if</span> (sself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) {</div><div class=\"line\">            [sself.lastAddedOperation addDependency:operation];</div><div class=\"line\">            sself.lastAddedOperation = operation;</div><div class=\"line\">        }</div></pre></td></tr></table></figure>\n<p>&#x6700;&#x540E;&#x8FD4;&#x56DE;operation&#x3002;</p>\n<p>&#x6B64;&#x5916;&#xFF0C;&#x8FD8;&#x6709;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x5C31;&#x662F;&#x53D6;&#x6D88;&#x4EFB;&#x52A1;&#x7684;&#x529F;&#x80FD;&#x3002;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)cancel:(<span class=\"keyword\">nullable</span> SDWebImageDownloadToken *)token</div></pre></td></tr></table></figure>\n<p>&#x9996;&#x5148;&#x8FDB;&#x5165;&#x5230;dispatch_barrier_async&#x4E2D;&#x6267;&#x884C;&#x4EFB;&#x52A1;&#xFF0C;&#x6805;&#x680F;&#x51FD;&#x6570;&#x7684;&#x4F5C;&#x7528;&#x662F;&#xFF0C;&#x5728;&#x5176;&#x961F;&#x5217;&#x4E2D;&#xFF0C;&#x4FDD;&#x8BC1;&#x5728;&#x5176;&#x4E4B;&#x524D;&#x7684;&#x6240;&#x6709;&#x4EFB;&#x52A1;&#x90FD;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x540E;&#x624D;&#x4F1A;&#x6267;&#x884C;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x5176;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x540E;&#xFF0C;&#x540E;&#x9762;&#x7684;&#x5176;&#x4ED6;&#x4EFB;&#x52A1;&#x624D;&#x80FD;&#x6B63;&#x5E38;&#x6267;&#x884C;&#x3002;&#x5018;&#x82E5;&#x4E00;&#x4E2A;&#x961F;&#x5217;&#x4E2D;&#x6240;&#x6709;&#x7684;&#x51FD;&#x6570;&#x90FD;&#x662F;&#x6805;&#x680F;&#x51FD;&#x6570;&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x961F;&#x5217;&#x867D;&#x7136;&#x672C;&#x8EAB;&#x662F;&#x5E76;&#x884C;&#x961F;&#x5217;&#xFF0C;&#x4F46;&#x5B9E;&#x9645;&#x6548;&#x679C;&#x662F;&#x4E32;&#x884C;&#x961F;&#x5217;&#x7684;&#x6548;&#x679C;&#x3002;&#x5728;dispatch_barrier_async&#x4E2D;&#x5206;&#x522B;&#x5220;&#x9664;callbackBlocks&#x548C;URLOperations&#x4E2D;&#x548C;token&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x5BF9;&#x8C61;&#x3002;</p>\n<h5 id=\"SDWebImageDownloaderOperation\"><a href=\"#SDWebImageDownloaderOperation\" class=\"headerlink\" title=\"SDWebImageDownloaderOperation\"></a>SDWebImageDownloaderOperation</h5><p>&#x9996;&#x5148;&#xFF0C;SDWebImageDownloaderOperation&#x662F;&#x7EE7;&#x627F;&#x4E8E;NSOperation&#x7684;&#xFF0C;&#x628A;&#x5176;&#x52A0;&#x5165;&#x4E00;&#x4E2A;&#x961F;&#x5217;&#x4E2D;&#xFF0C;&#x5C31;&#x4F1A;&#x81EA;&#x52A8;&#x6267;&#x884C;&#xFF0C;&#x8FD9;&#x662F;NSOperation&#x7684;&#x7279;&#x70B9;&#x3002;&#x8FD9;&#x91CC;&#x7684;SDWebImageDownloaderOperation&#x662F;&#x4E00;&#x4E2A;&#x81EA;&#x5B9A;&#x4E49;NSOperation&#xFF0C;&#x81EA;&#x5B9A;&#x4E49;NSOperation&#x9700;&#x8981;&#x81EA;&#x5DF1;&#x5B9E;&#x73B0;start&#x65B9;&#x6CD5;&#xFF0C;&#x81EA;&#x5DF1;&#x7EF4;&#x62A4;isFinished&#x548C;isExecuting&#x7B49;&#x5C5E;&#x6027;&#x3002;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)start</div></pre></td></tr></table></figure>\n<p>&#x5728;start&#x65B9;&#x6CD5;&#x91CC;&#xFF0C;&#x5927;&#x81F4;&#x505A;&#x4E86;&#x751F;&#x6210;unownedSession&#xFF0C;dataTask&#xFF0C;&#x6267;&#x884C;dataTask&#x7B49;&#x5DE5;&#x4F5C;&#x3002;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span>.dataTask resume]</div></pre></td></tr></table></figure>\n<p>&#x5728;&#x5F00;&#x59CB;&#x6267;&#x884C;&#x4E4B;&#x540E;&#xFF0C;&#x8FDB;&#x884C;&#x8C03;&#x7528;&#x4FDD;&#x5B58;&#x5728;callbackBlocks&#x4E2D;&#x7684;&#x6240;&#x6709;progressBlock&#xFF0C;&#x5E76;&#x4E14;&#x8BBE;&#x7F6E;self.executing = YES&#x3002;&#x6700;&#x540E;&#x53D1;&#x9001;&#x901A;&#x77E5;SDWebImageDownloadStartNotification&#xFF0C;&#x8868;&#x793A;&#x4EFB;&#x52A1;&#x5DF2;&#x7ECF;&#x5F00;&#x59CB;&#x3002;</p>\n<p>&#x540C;&#x65F6;&#x4E5F;&#x8981;&#x5B9E;&#x73B0;done&#x51FD;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x4EFB;&#x52A1;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x3002;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)done {</div><div class=\"line\">    <span class=\"keyword\">self</span>.finished = <span class=\"literal\">YES</span>;</div><div class=\"line\">    <span class=\"keyword\">self</span>.executing = <span class=\"literal\">NO</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span> reset];</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n<p>&#x4E00;&#x4E2A;&#x5C0F;tips&#xFF1A;</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@synthesize</span> finished = _finished;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setFinished:(<span class=\"built_in\">BOOL</span>)finished {</div><div class=\"line\">    [<span class=\"keyword\">self</span> willChangeValueForKey:<span class=\"string\">@&quot;isFinished&quot;</span>];</div><div class=\"line\">    _finished = finished;</div><div class=\"line\">    [<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@&quot;isFinished&quot;</span>];</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n<p>&#x8FD9;&#x6837;&#x5199;&#x7684;&#x597D;&#x5904;&#x662F;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x8BBE;&#x7F6E;&#x5F53;&#x524D;&#x7684;finished&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x76F8;&#x5F53;&#x4E8E;&#x8BBE;&#x7F6E;&#x4E86;isFinished&#xFF0C;&#x6240;&#x6709;&#x5BF9;&#x5176;&#x7684;KVO&#x90FD;&#x4F1A;&#x751F;&#x6548;&#x3002;</p>\n<h5 id=\"&#x4E00;&#x4E9B;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x8FC7;&#x7A0B;&#x4E2D;&#x7684;tips\"><a href=\"#&#x4E00;&#x4E9B;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x8FC7;&#x7A0B;&#x4E2D;&#x7684;tips\" class=\"headerlink\" title=\"&#x4E00;&#x4E9B;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x8FC7;&#x7A0B;&#x4E2D;&#x7684;tips\"></a>&#x4E00;&#x4E9B;&#x9605;&#x8BFB;&#x4EE3;&#x7801;&#x8FC7;&#x7A0B;&#x4E2D;&#x7684;tips</h5><ul class=\"ui list\">\n<li>&#x4F7F;&#x7528;@synchronized&#x4FDD;&#x8BC1;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#xFF0C;&#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x4E2D;&#x5C31;&#x662F;&#x76F8;&#x5F53;&#x4E8E;&#x5BF9;runningOperations&#x52A0;&#x4E86;&#x9501;&#xFF0C;&#x4FDD;&#x8BC1;&#x7684;&#x5176;&#x5728;&#x4E0D;&#x540C;&#x7EBF;&#x7A0B;&#x8BBF;&#x95EE;&#x662F;&#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x9519;&#x8BEF;&#x3002;</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.runningOperations) {</div><div class=\"line\">        [<span class=\"keyword\">self</span>.runningOperations addObject:operation];</div><div class=\"line\">    }</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"重读SDWebImage\"><a href=\"#重读SDWebImage\" class=\"headerlink\" title=\"重读SDWebImage\"></a>重读SDWebImage</h4><p>很早以前刚接触iOS开发的时候就知道SDWebImage的强大和流行，在大部分的iOS项目中都可以看到她的身影，也是相当经典的第三方库，非常值得阅读，只是一直以来都只是大致了解其运行的流程，并没有深入阅读源码，其中的许多设计和细节都非常值得学习，所以让我们再次去一探究竟。</p>\n<p>首先我们从一张时序图来了解SDWebImage最主要的工作流程。<img src=\"/2017/09/18/重读SDWebImage/SDWebImageSequenceDiagram.png\" alt=\"\"></p>\n<p>其工作流程可以分为下列的步骤：</p>\n<ol>\n<li>控件调用setImageWithURL接口</li>\n<li>追溯到UIView的loadImageWithURL方法</li>\n<li>在SDWebImageManager中首先通过queryDiskCacheForKey方法寻找所请求的图片是否在沙盒中缓存</li>\n<li>如果有，则直接返回Image，否则通过downloadImage方法使用另外一个类SDWebImageDownloader下载图片，返回结果后，通过storeImage缓存图片，而后再返回Image</li>\n<li>把Image数据set到相应的控件上</li>\n</ol>\n<p>了解了基本流程后，我们再看看具体的类结构。<img src=\"/2017/09/18/重读SDWebImage/SDWebImageClassDiagram.png\" alt=\"\"></p>\n<p>初看起来是比较复杂的一张类图，但仔细看看后可以发现其实他们之间的关系是比较清晰的。</p>\n<ul>\n<li>首先我们从左上角开始看起，对UIButton、UIImageView等控件添加分类方法作为下载图片的入口，所有的方法最终走他们父类UIview的方法sd_internalSetImage</li>\n<li>SDWebImageManager 作为连接所有类的核心，在sd_internalSetImage方法中通过调用loadImageWithURL进入。</li>\n<li>SDWebImageCombinedOperation 描述的是一个在Manager层面的下载操作，里面包含了取消block还有真正的下载操作Operation。</li>\n<li>SDWebImageManagerDelegate 提供一些代理方法给外部使用</li>\n<li>SDImageCache 看其名字就知道是提供缓存功能的</li>\n<li>SDImageCacheConfig 配置缓存设置信息的属性及方法</li>\n<li>SDWebImageDownloader 看其名字也知道是用来下载图片的</li>\n<li>SDWebImageDownloaderOperation 一个真正的下载任务</li>\n<li>SDWebImageDownloadToken 用来描述一个下载任务的特征</li>\n<li>SDWebImageDownloaderOperationInterface 如果想要自定义一个下载任务的话，必须遵守的协议</li>\n<li>SDWebImagePrefetcher 用来预下载图片的，可以下载完先不使用</li>\n</ul>\n<p>这么多类中，其实支撑SDWebImage运作的最主要的三个部分，他们分别是：SDWebImageManager、SDImageCache、SDWebImageDownloader下面我们逐一对其进行细细分析，看看他们到底是怎么工作的。</p>\n<h5 id=\"SDWebImageManager\"><a href=\"#SDWebImageManager\" class=\"headerlink\" title=\"SDWebImageManager\"></a>SDWebImageManager</h5><p>如果我们查看SDWebImageManager.m的源码，会发现其中近一半多的篇幅都被单独一个方法占据了，他就是之前我们提过的：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span> &lt;SDWebImageOperation&gt;)loadImageWithURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url options:(SDWebImageOptions)options progress:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock completed:(<span class=\"keyword\">nullable</span> SDInternalCompletionBlock)completedBlock;</div></pre></td></tr></table></figure>\n<p>很明显这个方法中的内容是SDWebImageManager中最核心的工作流程，下面我们逐一梳理其中的逻辑。</p>\n<ol>\n<li><p>检查URL的合法性</p>\n</li>\n<li><p>检查URL是否曾经失败过</p>\n</li>\n<li><p>结合上面的信息，选择是否提前回调。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span> callCompletionBlockForOperation:operation completion:completedBlock error:[<span class=\"built_in\">NSError</span> errorWithDomain:<span class=\"built_in\">NSURLErrorDomain</span> code:<span class=\"built_in\">NSURLErrorFileDoesNotExist</span> userInfo:<span class=\"literal\">nil</span>] url:url];</div></pre></td></tr></table></figure>\n</li>\n<li><p>根据URL获取CacheKey，通过CacheKey去本地寻找图片，现在内存中找，如果内存中没有就去沙盒中找，这里使用了GCD异步函数，专门在一个IO线程里做沙盒存取的操作。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSOperation</span> *)queryCacheOperationForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key done:(<span class=\"keyword\">nullable</span> SDCacheQueryCompletedBlock)doneBlock &#123;</div><div class=\"line\">    <span class=\"comment\">// First check the in-memory cache...</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image = [<span class=\"keyword\">self</span> imageFromMemoryCacheForKey:key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (image) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSData</span> *diskData = <span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([image isGIF]) &#123;</div><div class=\"line\">            diskData = [<span class=\"keyword\">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (doneBlock) &#123;</div><div class=\"line\">            doneBlock(image, diskData, SDImageCacheTypeMemory);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSOperation</span> *operation = [<span class=\"built_in\">NSOperation</span> new];</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (operation.isCancelled) &#123;</div><div class=\"line\">            <span class=\"comment\">// do not call the completion if cancelled</span></div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">NSData</span> *diskData = [<span class=\"keyword\">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class=\"line\">            <span class=\"built_in\">UIImage</span> *diskImage = [<span class=\"keyword\">self</span> diskImageForKey:key];</div><div class=\"line\">            <span class=\"keyword\">if</span> (diskImage &amp;&amp; <span class=\"keyword\">self</span>.config.shouldCacheImagesInMemory) &#123;</div><div class=\"line\">                <span class=\"built_in\">NSUInteger</span> cost = SDCacheCostForImage(diskImage);</div><div class=\"line\">                [<span class=\"keyword\">self</span>.memCache setObject:diskImage forKey:key cost:cost];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (doneBlock) &#123;</div><div class=\"line\">                <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                    doneBlock(diskImage, diskData, SDImageCacheTypeDisk);</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果缓存中有，则回调，没有的话则去网络下载</p>\n<p> 这里有个值得一说的点就是作者通过位移运算符做SDWebImageDownloaderOptions的枚举值，通过对枚举值进行或运算可以通过一个值描述多个枚举。</p>\n  <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">SDWebImageDownloaderLowPriority = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">0</span> <span class=\"comment\">//00000001</span></div><div class=\"line\">SDWebImageDownloaderProgressiveDownload = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">1</span> <span class=\"comment\">//00000010</span></div><div class=\"line\">SDWebImageDownloaderUseNSURLCache = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">2</span> <span class=\"comment\">//00000100</span></div><div class=\"line\">options =  SDWebImageDownloaderLowPriority || SDWebImageDownloaderProgressiveDownload || SDWebImageDownloaderUseNSURLCache</div><div class=\"line\">options = <span class=\"number\">00000111</span></div></pre></td></tr></table></figure>\n<p> 设置好配置信息后去网络下载</p>\n</li>\n<li><p>如果下载成功后就把图片cache起来，然后回调</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">if</span> (downloadedImage &amp;&amp; finished) &#123;</div><div class=\"line\">\t[<span class=\"keyword\">self</span>.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:<span class=\"literal\">nil</span>];&#125;</div><div class=\"line\">[<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:downloadedImage data:downloadedData error:<span class=\"literal\">nil</span> cacheType:SDImageCacheTypeNone finished:finished url:url];</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>以上就是SDWebImageManager的主要功能和流程，在这其中包含了对imageCache和imageDownloader的调用，下面我们就先说一说imageCache。</p>\n<h5 id=\"SDImageCache\"><a href=\"#SDImageCache\" class=\"headerlink\" title=\"SDImageCache\"></a>SDImageCache</h5><p>其实SDImageCache的功能很简单，就是对图片的缓存，缓存有两个地方，一个是内存memory，另外一个是沙盒disk。SDImageCache分别提供了对这两个地方进行图片的存、取、删的功能。我们就通过逐一介绍这些方法作为切入点对SDImageCache进行分析。</p>\n<ul>\n<li><p>存储Store</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)storeImage:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)image</div><div class=\"line\">         imageData:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSData</span> *)imageData</div><div class=\"line\">            forKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key</div><div class=\"line\">            toDisk:(<span class=\"built_in\">BOOL</span>)toDisk</div><div class=\"line\">        completion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completionBlock;</div></pre></td></tr></table></figure>\n<p>这些参数都很好理解，如果cacheconfig中设置了缓存在内存中，则先回把数据缓存进内存，然后再缓存至disk沙盒中。[self checkIfQueueIsIOQueue]检查当前queue是不是IOqueue。然后再把数据写入对应的路径中。</p>\n</li>\n<li><p>取Query</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSOperation</span> *)queryCacheOperationForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key done:(<span class=\"keyword\">nullable</span> SDCacheQueryCompletedBlock)doneBlock;</div></pre></td></tr></table></figure>\n<p>最主要的方法就是这个，其中先去内存中寻找，如果没有命中，则异步去disk中再找，如果找到的话，则把当前图片缓存在内存里方便下一次寻找的的同时，返回图片。</p>\n</li>\n<li><p>删除Remove</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)removeImageForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key fromDisk:(<span class=\"built_in\">BOOL</span>)fromDisk withCompletion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completion</div></pre></td></tr></table></figure>\n<p>删除逻辑就比较简单了，如果是cacheconfig是shouldCacheImagesInMemory的话，先删除内存中的，再异步删除disk中的数据，然后跳回主线程执行回调。</p>\n</li>\n</ul>\n<h5 id=\"SDWebImageDownloader\"><a href=\"#SDWebImageDownloader\" class=\"headerlink\" title=\"SDWebImageDownloader\"></a>SDWebImageDownloader</h5><p>在SDWebImage中另一个非常重要的部分就是下载器SDWebImageDownloader了，总体其使用了NSURLSession和NSOperation进行设计和实现。下面这个方法就是整个下载器最主要的了。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> SDWebImageDownloadToken *)downloadImageWithURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url options:(SDWebImageDownloaderOptions)options progress:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock completed:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderCompletedBlock)completedBlock;</div></pre></td></tr></table></figure>\n<p>这个方法首先会转入一个新的方法addProgressCallback，并且直接返回其的返回值。在addProgressCallback中会根据URL去URLOperations里面寻找是否有对应的Operation,没有的话，则把createCallback赋值给Operation。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">operation = createCallback();</div></pre></td></tr></table></figure>\n<p>并且加入到数组URLOperations中保存。在URLOperations的完成回调函数里写，在Operation执行完毕后，从URLOperations中删除。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];</div><div class=\"line\">token = [SDWebImageDownloadToken new];</div><div class=\"line\">token.url = url;</div><div class=\"line\">token.downloadOperationCancelToken = downloadOperationCancelToken;</div></pre></td></tr></table></figure>\n<p>通过addHandlersForProgress方法，把过程回调progressBlock和完成回调completedBlock封装在一个downloadOperationCancelToken里面，并且在callbackBlocks中保存。然后再生成一个SDWebImageDownloadToken，分别包含URL和Token信息。最终返回Token</p>\n<p>那么到这里，让我们看看前面createCallback()中到底做了什么？</p>\n<p>在createCallback()中，我们根据options设置了request的缓存策略</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSURLRequestCachePolicy</span> cachePolicy = <span class=\"built_in\">NSURLRequestReloadIgnoringLocalCacheData</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (options &amp; SDWebImageDownloaderUseNSURLCache) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageDownloaderIgnoreCachedResponse) &#123;</div><div class=\"line\">                cachePolicy = <span class=\"built_in\">NSURLRequestReturnCacheDataDontLoad</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                cachePolicy = <span class=\"built_in\">NSURLRequestUseProtocolCachePolicy</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>生成了request，设置requestheader，cookies</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSMutableURLRequest</span> *request = [[<span class=\"built_in\">NSMutableURLRequest</span> alloc] initWithURL:url cachePolicy:cachePolicy timeoutInterval:timeoutInterval];</div><div class=\"line\">        request.HTTPShouldHandleCookies = (options &amp; SDWebImageDownloaderHandleCookies);</div><div class=\"line\">        request.HTTPShouldUsePipelining = <span class=\"literal\">YES</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sself.headersFilter) &#123;</div><div class=\"line\">            request.allHTTPHeaderFields = sself.headersFilter(url, [sself.HTTPHeaders <span class=\"keyword\">copy</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            request.allHTTPHeaderFields = sself.HTTPHeaders;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>根据request和session生成SDWebImageDownloaderOperation。对Operation的一些属性进行设置，例如credentials（认证），queuePriority（队列中优先级）等等。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SDWebImageDownloaderOperation *operation = [[sself.operationClass alloc] initWithRequest:request inSession:sself.session options:options];</div></pre></td></tr></table></figure>\n<p>最后加入到downloadQueue队列中，并且添加上一个加入的lastAddedOperation对当前Operation的依赖。保证先进后出的顺序。（可以想象一下，你快速刷新Tableview的时候，同时有很多图片下载，但是如果是FIFO的话，你已经在底部了，图片还是从上往下，按照请求的顺序返回是不是不合理，合理的应该是你当前眼睛看到的那部分图片，也就是最后发出的那些请求先返回，这样就很好理解了。）</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[sself.downloadQueue addOperation:operation];</div><div class=\"line\">        <span class=\"keyword\">if</span> (sself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) &#123;</div><div class=\"line\">            [sself.lastAddedOperation addDependency:operation];</div><div class=\"line\">            sself.lastAddedOperation = operation;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>最后返回operation。</p>\n<p>此外，还有另外一个方法，就是取消任务的功能。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)cancel:(<span class=\"keyword\">nullable</span> SDWebImageDownloadToken *)token</div></pre></td></tr></table></figure>\n<p>首先进入到dispatch_barrier_async中执行任务，栅栏函数的作用是，在其队列中，保证在其之前的所有任务都执行完毕后才会执行，并且在其执行完毕后，后面的其他任务才能正常执行。倘若一个队列中所有的函数都是栅栏函数的话，那么这个队列虽然本身是并行队列，但实际效果是串行队列的效果。在dispatch_barrier_async中分别删除callbackBlocks和URLOperations中和token所对应的对象。</p>\n<h5 id=\"SDWebImageDownloaderOperation\"><a href=\"#SDWebImageDownloaderOperation\" class=\"headerlink\" title=\"SDWebImageDownloaderOperation\"></a>SDWebImageDownloaderOperation</h5><p>首先，SDWebImageDownloaderOperation是继承于NSOperation的，把其加入一个队列中，就会自动执行，这是NSOperation的特点。这里的SDWebImageDownloaderOperation是一个自定义NSOperation，自定义NSOperation需要自己实现start方法，自己维护isFinished和isExecuting等属性。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)start</div></pre></td></tr></table></figure>\n<p>在start方法里，大致做了生成unownedSession，dataTask，执行dataTask等工作。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span>.dataTask resume]</div></pre></td></tr></table></figure>\n<p>在开始执行之后，进行调用保存在callbackBlocks中的所有progressBlock，并且设置self.executing = YES。最后发送通知SDWebImageDownloadStartNotification，表示任务已经开始。</p>\n<p>同时也要实现done函数，表示任务执行完毕。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)done &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.finished = <span class=\"literal\">YES</span>;</div><div class=\"line\">    <span class=\"keyword\">self</span>.executing = <span class=\"literal\">NO</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span> reset];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一个小tips：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@synthesize</span> finished = _finished;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setFinished:(<span class=\"built_in\">BOOL</span>)finished &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> willChangeValueForKey:<span class=\"string\">@\"isFinished\"</span>];</div><div class=\"line\">    _finished = finished;</div><div class=\"line\">    [<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@\"isFinished\"</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样写的好处是，当我们设置当前的finished时，我们相当于设置了isFinished，所有对其的KVO都会生效。</p>\n<h5 id=\"一些阅读代码过程中的tips\"><a href=\"#一些阅读代码过程中的tips\" class=\"headerlink\" title=\"一些阅读代码过程中的tips\"></a>一些阅读代码过程中的tips</h5><ul>\n<li>使用@synchronized保证线程安全，下面的例子中就是相当于对runningOperations加了锁，保证的其在不同线程访问是不会产生错误。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.runningOperations) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.runningOperations addObject:operation];</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/与Weex的第一次亲密接触—初识/weex.png","slug":"weex.png","post":"cjaag2mrj0001hgodnmy4duny","modified":1,"renderable":0},{"_id":"source/_posts/重读SDWebImage/SDWebImageClassDiagram.png","slug":"SDWebImageClassDiagram.png","post":"cjaag2mro0005hgodvwhvmo5a","modified":1,"renderable":0},{"_id":"source/_posts/重读SDWebImage/SDWebImageSequenceDiagram.png","slug":"SDWebImageSequenceDiagram.png","post":"cjaag2mro0005hgodvwhvmo5a","modified":1,"renderable":0},{"_id":"source/_posts/与Weex的第一次亲密接触—初识/dabaochenggong.png","slug":"dabaochenggong.png","post":"cjaag2mrj0001hgodnmy4duny","modified":1,"renderable":0},{"_id":"source/_posts/与Weex的第一次亲密接触—初识/image-index.png","post":"cjaag2mrj0001hgodnmy4duny","slug":"image-index.png","modified":1,"renderable":1},{"_id":"source/_posts/与Weex的第一次亲密接触—初识/ios.png","post":"cjaag2mrj0001hgodnmy4duny","slug":"ios.png","modified":1,"renderable":1},{"_id":"source/_posts/与Weex的第一次亲密接触—初识/node-v.png","post":"cjaag2mrj0001hgodnmy4duny","slug":"node-v.png","modified":1,"renderable":1},{"_id":"source/_posts/与Weex的第一次亲密接触—初识/podinstall.png","post":"cjaag2mrj0001hgodnmy4duny","slug":"podinstall.png","modified":1,"renderable":1},{"_id":"source/_posts/与Weex的第一次亲密接触—初识/webbuild.png","slug":"webbuild.png","post":"cjaag2mrj0001hgodnmy4duny","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}